{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/sitemap.xml","path":"sitemap.xml","modified":0,"renderable":0},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"68b5983a234b9af2c9a1592455595d81dd9772fd","modified":1461635630000},{"_id":"source/robots.txt","hash":"e3af5a688770070dabaa6a240d7da9ae78e8e3ce","modified":1461635770000},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1461635576000},{"_id":"source/sitemap.xml","hash":"bb720bb6ca819387f174cdc4eef18356f28338e5","modified":1461635723000},{"_id":"themes/yilia/_config.yml","hash":"c8561e87eeeb2181dfe516981beb742ef7d8927e","modified":1461635576000},{"_id":"themes/yilia/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1461635576000},{"_id":"source/_posts/CocoaPod使用心得.md","hash":"26269491bc3a65942deab0f3d2755ea9fb6f25aa","modified":1461635576000},{"_id":"source/_posts/HEXO搭建个人博客.md","hash":"2634436b0d7c01ba50af10e0dfceb75f0fef4eb3","modified":1461635576000},{"_id":"source/_posts/HEXO进阶.md","hash":"fcfd129c3ac2ba780112a5bb760167b6b35c6f1f","modified":1461721325000},{"_id":"source/_posts/iBeacon.md","hash":"7ec0af9abb118313a54c975a59c0a548abd8975b","modified":1461635576000},{"_id":"source/_posts/iOS动态更新.md","hash":"76deabbe526d147b8907845a971972b417e77a01","modified":1461635576000},{"_id":"source/_posts/iOS9 变化笔记.md","hash":"e3fba53c3709b06de741eda46576a10039a657b5","modified":1461635576000},{"_id":"themes/yilia/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1461635576000},{"_id":"themes/yilia/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1461635576000},{"_id":"themes/yilia/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1461635576000},{"_id":"themes/yilia/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1461635576000},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1461635576000},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1461635576000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1461635576000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1461635576000},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1461635576000},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1461635576000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1461635576000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1461635576000},{"_id":"themes/yilia/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1461635576000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1461635576000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"082504c9fd8600306d4ca55f03e3cbb0ddd99dd7","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"f7068535c0df7e7bc6614a046e7d4b262a65d8b2","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"47dc7c1d35928a7b026c683547f8482d2e524c63","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1461635576000},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1461635576000},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461635576000},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1461635576000},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1461635576000},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1461635576000},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1461635576000},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1461635576000},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1461635576000},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1461635576000},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1461635576000},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1461635576000},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1461635576000},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1461635576000},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1461635576000},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1461635576000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1461635576000},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1461635576000},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1461635576000},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1461635576000},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1461635576000},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1461635576000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1461635576000},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1461635576000},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1461635576000},{"_id":"themes/yilia/source/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1461635576000},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1461635576000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1461635576000},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1461635576000},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1461635576000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1461635576000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1461635576000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1461635576000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1461635576000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1461635576000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1461635576000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1461635576000}],"Category":[{"name":"工具","_id":"cini7ichy0002kofy33ht8k1w"},{"name":"博客","_id":"cini7ici50006kofy0znvw6mk"},{"name":"技术分享","_id":"cini7icia000bkofyiw04obmv"},{"name":"iOS","_id":"cini7icib000dkofy2xuyl8gf"}],"Data":[],"Page":[],"Post":[{"title":"CocoaPods使用心得","_content":"\n![CocoaPods](/img/CocoaPods.png)\n\n<!--more-->\n\n## 简介：\n　　本章介绍什么是 `CocoaPods` ,如何使用 `CocoaPods` , 以及 `CocoaPods` 的原理,和使用 `CocoaPods` 时经常出现的一些问题。\n\n　　Cocoapods 是 OS X 和 iOS 下的一个第三方库管理工具。我们能使用CocoaPods添加被称作 “Pods”的依赖库,并轻松管理它们的版本,CocoaPods会帮我们配置好这些三方库的路径及开发环境,极大的提升了开发者的工作效率。\n\n### 安装CocoaPods　\n\n　　Mac下自带ruby,使用ruby的gem命令安装,ruby的软件源被墙了,把官方的ruby源替换成国内的淘宝源。\n\n### 更换Gem源\n\n```bash\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://ruby.taobao.org/\n$ gem sources -l\n```\n* 1.移除掉原有的源（服务器在国外，速度较慢）。\n* 2.等1有反应之后再敲2命令（替换成淘宝上的ruby镜像https）。\n* 3.验证是否成功。成功如下：\n\n```bash\n\n*** CURRENT SOURCES ***\n\nhttp://ruby.taobao.org/\n\n```\n\n### 更新Gem源\n\n```bash\n\nsudo gem update --system\n\n```\n### 安装cocoapods\n\n```bash\n\n$ sudo gem install cocoapods\n$ pod setup\n\n```\n\npod setup 在执行时会比较慢，因为Cocoapods 要将它的信息下载到 ~/.cocoapods目录下, 耐心等待…\n\n\n#### 提升cocoapods的安装速度\n\n所有的项目的 Podspec 文件都托管在https://github.com/CocoaPods/Specs。第一次执行 pod setup 时，CocoaPods 会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大，有 80M 左右。\n作者akinliu 在 gitcafe 和 oschina 上建立了 CocoaPods 索引库的镜像(在国内),我们可以使用CocoaPods国内的镜像索引，操作时会快多了,如gitcafe：\n\n```bash\n\npod repo remove master\npod repo add master https://gitcafe.com/akuandev/Specs.git\npod repo update\n\n```\n\n\n### 使用cocoapods\n\ncocoapods安装完成后，使用 pod search 命令来验证一下\n\n```bash\n\npod search AFNetworking\n\n\n```\n\n终端将会有如下结果：\n\n```bash\n\n-> AFNetworking (3.0.4)\nA delightful iOS and OS X networking framework.\npod 'AFNetworking', '~> 3.0.4'\n- Homepage: https://github.com/AFNetworking/AFNetworking\n- Source:   https://github.com/AFNetworking/AFNetworking.git\n- Versions: 3.0.4, 3.0.3, 3.0.2, 3.0.1, 3.0.0, 3.0.0-beta.3, 3.0.0-beta.2,\n3.0.0-beta.1, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0,\n2.4.1, 2.4.0, 2.3.1, 2.3.0, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.1.0, 2.0.3,\n2.0.2, 2.0.1, 2.0.0, 2.0.0-RC3, 2.0.0-RC2, 2.0.0-RC1, 1.3.4, 1.3.3, 1.3.2,\n1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.1, 1.0, 1.0RC3, 1.0RC2, 1.0RC1,\n0.10.1, 0.10.0, 0.9.2, 0.9.1, 0.9.0, 0.7.0, 0.5.1 [master repo]\n- Subspecs:\n- AFNetworking/Serialization (3.0.4)\n- AFNetworking/Security (3.0.4)\n- AFNetworking/Reachability (3.0.4)\n- AFNetworking/NSURLSession (3.0.4)\n- AFNetworking/UIKit (3.0.4)\n\n\n-> AFNetworking+AutoRetry (0.0.5)\nAuto Retries for AFNetworking requests\npod 'AFNetworking+AutoRetry', '~> 0.0.5'\n- Homepage: https://github.com/shaioz/AFNetworking-AutoRetry\n- Source:   https://github.com/shaioz/AFNetworking-AutoRetry.git\n- Versions: 0.0.5, 0.0.4, 0.0.3, 0.0.2, 0.0.1 [master repo]\n\n.........太多了，省略\n\n```\n\npod search 是CocoaPods的一个搜索命令,我们可以用来搜索任何托管在CocoaPods上的三方库。    \n\n使用CocoaPods时需要新建一个 Podfile 的文件,cd 到 我的Demo项目里，Demo目录下有三个文件\n\n```bash\n\nDemo 、  Demo.xcodeproj  、 DemoTests\n\n```\n\n新建 Podfile\n\n```bash\n\ntouch Podfile\n\n```\n\nvim 编辑 Podfile\n\n```bash\nvim Podfile\n```\n由于是新建的 Podfile 里面应该是空白的。然后我们在里面添加依赖库，格式如下：\n\n```bash\n\nplatform :ios\npod 'Reachability',  '~> 3.0.0'\npod 'ASIHTTPRequest'\n\n```\n\n‘~> 3.0.0’ 是 Reachability 的版本号, 设定了版本号CocoaPods就会下载对应的版本,ASIHTTPRequest没指定版本号,CocoaPods就会下载最新版本的ASIHTTPRequest。\n退出编辑，执行 pod install 下载三方库。\n\n```bash\n\npod install\n\n```\n完成后我Demo项目下的文件多了几个:\n\n```bash\nDemo 、  Demo.xcodeproj  、 DemoTests （之前的三个）\n\nDemo.xcworkspace 、Podfile 、Podfile.lock 、Pods\n```\n\n这个时候我们打开Demo项目是点击 Demo.xcworkspace 文件了，到此CocoaPods的基本使用已经讲完了，接下来的CocoaPods的原理，和让我们自己的三方库也支持CocoaPods。\n\n待续…\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/CocoaPod使用心得.md","raw":"---\ntitle: CocoaPods使用心得\ncategory: 工具\n---\n\n![CocoaPods](/img/CocoaPods.png)\n\n<!--more-->\n\n## 简介：\n　　本章介绍什么是 `CocoaPods` ,如何使用 `CocoaPods` , 以及 `CocoaPods` 的原理,和使用 `CocoaPods` 时经常出现的一些问题。\n\n　　Cocoapods 是 OS X 和 iOS 下的一个第三方库管理工具。我们能使用CocoaPods添加被称作 “Pods”的依赖库,并轻松管理它们的版本,CocoaPods会帮我们配置好这些三方库的路径及开发环境,极大的提升了开发者的工作效率。\n\n### 安装CocoaPods　\n\n　　Mac下自带ruby,使用ruby的gem命令安装,ruby的软件源被墙了,把官方的ruby源替换成国内的淘宝源。\n\n### 更换Gem源\n\n```bash\n$ gem sources --remove https://rubygems.org/\n$ gem sources -a https://ruby.taobao.org/\n$ gem sources -l\n```\n* 1.移除掉原有的源（服务器在国外，速度较慢）。\n* 2.等1有反应之后再敲2命令（替换成淘宝上的ruby镜像https）。\n* 3.验证是否成功。成功如下：\n\n```bash\n\n*** CURRENT SOURCES ***\n\nhttp://ruby.taobao.org/\n\n```\n\n### 更新Gem源\n\n```bash\n\nsudo gem update --system\n\n```\n### 安装cocoapods\n\n```bash\n\n$ sudo gem install cocoapods\n$ pod setup\n\n```\n\npod setup 在执行时会比较慢，因为Cocoapods 要将它的信息下载到 ~/.cocoapods目录下, 耐心等待…\n\n\n#### 提升cocoapods的安装速度\n\n所有的项目的 Podspec 文件都托管在https://github.com/CocoaPods/Specs。第一次执行 pod setup 时，CocoaPods 会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大，有 80M 左右。\n作者akinliu 在 gitcafe 和 oschina 上建立了 CocoaPods 索引库的镜像(在国内),我们可以使用CocoaPods国内的镜像索引，操作时会快多了,如gitcafe：\n\n```bash\n\npod repo remove master\npod repo add master https://gitcafe.com/akuandev/Specs.git\npod repo update\n\n```\n\n\n### 使用cocoapods\n\ncocoapods安装完成后，使用 pod search 命令来验证一下\n\n```bash\n\npod search AFNetworking\n\n\n```\n\n终端将会有如下结果：\n\n```bash\n\n-> AFNetworking (3.0.4)\nA delightful iOS and OS X networking framework.\npod 'AFNetworking', '~> 3.0.4'\n- Homepage: https://github.com/AFNetworking/AFNetworking\n- Source:   https://github.com/AFNetworking/AFNetworking.git\n- Versions: 3.0.4, 3.0.3, 3.0.2, 3.0.1, 3.0.0, 3.0.0-beta.3, 3.0.0-beta.2,\n3.0.0-beta.1, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0,\n2.4.1, 2.4.0, 2.3.1, 2.3.0, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.1.0, 2.0.3,\n2.0.2, 2.0.1, 2.0.0, 2.0.0-RC3, 2.0.0-RC2, 2.0.0-RC1, 1.3.4, 1.3.3, 1.3.2,\n1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.1, 1.0, 1.0RC3, 1.0RC2, 1.0RC1,\n0.10.1, 0.10.0, 0.9.2, 0.9.1, 0.9.0, 0.7.0, 0.5.1 [master repo]\n- Subspecs:\n- AFNetworking/Serialization (3.0.4)\n- AFNetworking/Security (3.0.4)\n- AFNetworking/Reachability (3.0.4)\n- AFNetworking/NSURLSession (3.0.4)\n- AFNetworking/UIKit (3.0.4)\n\n\n-> AFNetworking+AutoRetry (0.0.5)\nAuto Retries for AFNetworking requests\npod 'AFNetworking+AutoRetry', '~> 0.0.5'\n- Homepage: https://github.com/shaioz/AFNetworking-AutoRetry\n- Source:   https://github.com/shaioz/AFNetworking-AutoRetry.git\n- Versions: 0.0.5, 0.0.4, 0.0.3, 0.0.2, 0.0.1 [master repo]\n\n.........太多了，省略\n\n```\n\npod search 是CocoaPods的一个搜索命令,我们可以用来搜索任何托管在CocoaPods上的三方库。    \n\n使用CocoaPods时需要新建一个 Podfile 的文件,cd 到 我的Demo项目里，Demo目录下有三个文件\n\n```bash\n\nDemo 、  Demo.xcodeproj  、 DemoTests\n\n```\n\n新建 Podfile\n\n```bash\n\ntouch Podfile\n\n```\n\nvim 编辑 Podfile\n\n```bash\nvim Podfile\n```\n由于是新建的 Podfile 里面应该是空白的。然后我们在里面添加依赖库，格式如下：\n\n```bash\n\nplatform :ios\npod 'Reachability',  '~> 3.0.0'\npod 'ASIHTTPRequest'\n\n```\n\n‘~> 3.0.0’ 是 Reachability 的版本号, 设定了版本号CocoaPods就会下载对应的版本,ASIHTTPRequest没指定版本号,CocoaPods就会下载最新版本的ASIHTTPRequest。\n退出编辑，执行 pod install 下载三方库。\n\n```bash\n\npod install\n\n```\n完成后我Demo项目下的文件多了几个:\n\n```bash\nDemo 、  Demo.xcodeproj  、 DemoTests （之前的三个）\n\nDemo.xcworkspace 、Podfile 、Podfile.lock 、Pods\n```\n\n这个时候我们打开Demo项目是点击 Demo.xcworkspace 文件了，到此CocoaPods的基本使用已经讲完了，接下来的CocoaPods的原理，和让我们自己的三方库也支持CocoaPods。\n\n待续…\n\n\n\n\n\n\n\n\n\n\n","slug":"CocoaPod使用心得","published":1,"date":"2016-04-26T01:52:56.000Z","updated":"2016-04-26T01:52:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cini7ichr0000kofymja1iwi6","content":"<p><img src=\"/img/CocoaPods.png\" alt=\"CocoaPods\"></p>\n<a id=\"more\"></a>\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>　　本章介绍什么是 <code>CocoaPods</code> ,如何使用 <code>CocoaPods</code> , 以及 <code>CocoaPods</code> 的原理,和使用 <code>CocoaPods</code> 时经常出现的一些问题。</p>\n<p>　　Cocoapods 是 OS X 和 iOS 下的一个第三方库管理工具。我们能使用CocoaPods添加被称作 “Pods”的依赖库,并轻松管理它们的版本,CocoaPods会帮我们配置好这些三方库的路径及开发环境,极大的提升了开发者的工作效率。</p>\n<h3 id=\"安装CocoaPods\"><a href=\"#安装CocoaPods\" class=\"headerlink\" title=\"安装CocoaPods　\"></a>安装CocoaPods　</h3><p>　　Mac下自带ruby,使用ruby的gem命令安装,ruby的软件源被墙了,把官方的ruby源替换成国内的淘宝源。</p>\n<h3 id=\"更换Gem源\"><a href=\"#更换Gem源\" class=\"headerlink\" title=\"更换Gem源\"></a>更换Gem源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources <span class=\"_\">-a</span> https://ruby.taobao.org/</span><br><span class=\"line\">$ gem sources <span class=\"_\">-l</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.移除掉原有的源（服务器在国外，速度较慢）。</li>\n<li>2.等1有反应之后再敲2命令（替换成淘宝上的ruby镜像https）。</li>\n<li>3.验证是否成功。成功如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">http://ruby.taobao.org/</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新Gem源\"><a href=\"#更新Gem源\" class=\"headerlink\" title=\"更新Gem源\"></a>更新Gem源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo gem update --system</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装cocoapods\"><a href=\"#安装cocoapods\" class=\"headerlink\" title=\"安装cocoapods\"></a>安装cocoapods</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo gem install cocoapods</span><br><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n<p>pod setup 在执行时会比较慢，因为Cocoapods 要将它的信息下载到 ~/.cocoapods目录下, 耐心等待…</p>\n<h4 id=\"提升cocoapods的安装速度\"><a href=\"#提升cocoapods的安装速度\" class=\"headerlink\" title=\"提升cocoapods的安装速度\"></a>提升cocoapods的安装速度</h4><p>所有的项目的 Podspec 文件都托管在<a href=\"https://github.com/CocoaPods/Specs。第一次执行\" target=\"_blank\" rel=\"external\">https://github.com/CocoaPods/Specs。第一次执行</a> pod setup 时，CocoaPods 会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大，有 80M 左右。<br>作者akinliu 在 gitcafe 和 oschina 上建立了 CocoaPods 索引库的镜像(在国内),我们可以使用CocoaPods国内的镜像索引，操作时会快多了,如gitcafe：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pod repo remove master</span><br><span class=\"line\">pod repo add master https://gitcafe.com/akuandev/Specs.git</span><br><span class=\"line\">pod repo update</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用cocoapods\"><a href=\"#使用cocoapods\" class=\"headerlink\" title=\"使用cocoapods\"></a>使用cocoapods</h3><p>cocoapods安装完成后，使用 pod search 命令来验证一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pod search AFNetworking</span><br></pre></td></tr></table></figure>\n<p>终端将会有如下结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-&gt; AFNetworking (3.0.4)</span><br><span class=\"line\">A delightful iOS and OS X networking framework.</span><br><span class=\"line\">pod <span class=\"string\">'AFNetworking'</span>, <span class=\"string\">'~&gt; 3.0.4'</span></span><br><span class=\"line\">- Homepage: https://github.com/AFNetworking/AFNetworking</span><br><span class=\"line\">- Source:   https://github.com/AFNetworking/AFNetworking.git</span><br><span class=\"line\">- Versions: 3.0.4, 3.0.3, 3.0.2, 3.0.1, 3.0.0, 3.0.0-beta.3, 3.0.0-beta.2,</span><br><span class=\"line\">3.0.0-beta.1, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0,</span><br><span class=\"line\">2.4.1, 2.4.0, 2.3.1, 2.3.0, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.1.0, 2.0.3,</span><br><span class=\"line\">2.0.2, 2.0.1, 2.0.0, 2.0.0-RC3, 2.0.0-RC2, 2.0.0-RC1, 1.3.4, 1.3.3, 1.3.2,</span><br><span class=\"line\">1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.1, 1.0, 1.0RC3, 1.0RC2, 1.0RC1,</span><br><span class=\"line\">0.10.1, 0.10.0, 0.9.2, 0.9.1, 0.9.0, 0.7.0, 0.5.1 [master repo]</span><br><span class=\"line\">- Subspecs:</span><br><span class=\"line\">- AFNetworking/Serialization (3.0.4)</span><br><span class=\"line\">- AFNetworking/Security (3.0.4)</span><br><span class=\"line\">- AFNetworking/Reachability (3.0.4)</span><br><span class=\"line\">- AFNetworking/NSURLSession (3.0.4)</span><br><span class=\"line\">- AFNetworking/UIKit (3.0.4)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; AFNetworking+AutoRetry (0.0.5)</span><br><span class=\"line\">Auto Retries <span class=\"keyword\">for</span> AFNetworking requests</span><br><span class=\"line\">pod <span class=\"string\">'AFNetworking+AutoRetry'</span>, <span class=\"string\">'~&gt; 0.0.5'</span></span><br><span class=\"line\">- Homepage: https://github.com/shaioz/AFNetworking-AutoRetry</span><br><span class=\"line\">- Source:   https://github.com/shaioz/AFNetworking-AutoRetry.git</span><br><span class=\"line\">- Versions: 0.0.5, 0.0.4, 0.0.3, 0.0.2, 0.0.1 [master repo]</span><br><span class=\"line\"></span><br><span class=\"line\">.........太多了，省略</span><br></pre></td></tr></table></figure>\n<p>pod search 是CocoaPods的一个搜索命令,我们可以用来搜索任何托管在CocoaPods上的三方库。    </p>\n<p>使用CocoaPods时需要新建一个 Podfile 的文件,cd 到 我的Demo项目里，Demo目录下有三个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Demo 、  Demo.xcodeproj  、 DemoTests</span><br></pre></td></tr></table></figure>\n<p>新建 Podfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">touch Podfile</span><br></pre></td></tr></table></figure>\n<p>vim 编辑 Podfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim Podfile</span><br></pre></td></tr></table></figure>\n<p>由于是新建的 Podfile 里面应该是空白的。然后我们在里面添加依赖库，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">platform :ios</span><br><span class=\"line\">pod <span class=\"string\">'Reachability'</span>,  <span class=\"string\">'~&gt; 3.0.0'</span></span><br><span class=\"line\">pod <span class=\"string\">'ASIHTTPRequest'</span></span><br></pre></td></tr></table></figure>\n<p>‘~&gt; 3.0.0’ 是 Reachability 的版本号, 设定了版本号CocoaPods就会下载对应的版本,ASIHTTPRequest没指定版本号,CocoaPods就会下载最新版本的ASIHTTPRequest。<br>退出编辑，执行 pod install 下载三方库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n<p>完成后我Demo项目下的文件多了几个:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Demo 、  Demo.xcodeproj  、 DemoTests （之前的三个）</span><br><span class=\"line\"></span><br><span class=\"line\">Demo.xcworkspace 、Podfile 、Podfile.lock 、Pods</span><br></pre></td></tr></table></figure>\n<p>这个时候我们打开Demo项目是点击 Demo.xcworkspace 文件了，到此CocoaPods的基本使用已经讲完了，接下来的CocoaPods的原理，和让我们自己的三方库也支持CocoaPods。</p>\n<p>待续…</p>\n","excerpt":"<p><img src=\"/img/CocoaPods.png\" alt=\"CocoaPods\"></p>","more":"<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>　　本章介绍什么是 <code>CocoaPods</code> ,如何使用 <code>CocoaPods</code> , 以及 <code>CocoaPods</code> 的原理,和使用 <code>CocoaPods</code> 时经常出现的一些问题。</p>\n<p>　　Cocoapods 是 OS X 和 iOS 下的一个第三方库管理工具。我们能使用CocoaPods添加被称作 “Pods”的依赖库,并轻松管理它们的版本,CocoaPods会帮我们配置好这些三方库的路径及开发环境,极大的提升了开发者的工作效率。</p>\n<h3 id=\"安装CocoaPods\"><a href=\"#安装CocoaPods\" class=\"headerlink\" title=\"安装CocoaPods　\"></a>安装CocoaPods　</h3><p>　　Mac下自带ruby,使用ruby的gem命令安装,ruby的软件源被墙了,把官方的ruby源替换成国内的淘宝源。</p>\n<h3 id=\"更换Gem源\"><a href=\"#更换Gem源\" class=\"headerlink\" title=\"更换Gem源\"></a>更换Gem源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources <span class=\"_\">-a</span> https://ruby.taobao.org/</span><br><span class=\"line\">$ gem sources <span class=\"_\">-l</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.移除掉原有的源（服务器在国外，速度较慢）。</li>\n<li>2.等1有反应之后再敲2命令（替换成淘宝上的ruby镜像https）。</li>\n<li>3.验证是否成功。成功如下：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">http://ruby.taobao.org/</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新Gem源\"><a href=\"#更新Gem源\" class=\"headerlink\" title=\"更新Gem源\"></a>更新Gem源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo gem update --system</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装cocoapods\"><a href=\"#安装cocoapods\" class=\"headerlink\" title=\"安装cocoapods\"></a>安装cocoapods</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ sudo gem install cocoapods</span><br><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n<p>pod setup 在执行时会比较慢，因为Cocoapods 要将它的信息下载到 ~/.cocoapods目录下, 耐心等待…</p>\n<h4 id=\"提升cocoapods的安装速度\"><a href=\"#提升cocoapods的安装速度\" class=\"headerlink\" title=\"提升cocoapods的安装速度\"></a>提升cocoapods的安装速度</h4><p>所有的项目的 Podspec 文件都托管在<a href=\"https://github.com/CocoaPods/Specs。第一次执行\">https://github.com/CocoaPods/Specs。第一次执行</a> pod setup 时，CocoaPods 会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大，有 80M 左右。<br>作者akinliu 在 gitcafe 和 oschina 上建立了 CocoaPods 索引库的镜像(在国内),我们可以使用CocoaPods国内的镜像索引，操作时会快多了,如gitcafe：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pod repo remove master</span><br><span class=\"line\">pod repo add master https://gitcafe.com/akuandev/Specs.git</span><br><span class=\"line\">pod repo update</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用cocoapods\"><a href=\"#使用cocoapods\" class=\"headerlink\" title=\"使用cocoapods\"></a>使用cocoapods</h3><p>cocoapods安装完成后，使用 pod search 命令来验证一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pod search AFNetworking</span><br></pre></td></tr></table></figure>\n<p>终端将会有如下结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-&gt; AFNetworking (3.0.4)</span><br><span class=\"line\">A delightful iOS and OS X networking framework.</span><br><span class=\"line\">pod <span class=\"string\">'AFNetworking'</span>, <span class=\"string\">'~&gt; 3.0.4'</span></span><br><span class=\"line\">- Homepage: https://github.com/AFNetworking/AFNetworking</span><br><span class=\"line\">- Source:   https://github.com/AFNetworking/AFNetworking.git</span><br><span class=\"line\">- Versions: 3.0.4, 3.0.3, 3.0.2, 3.0.1, 3.0.0, 3.0.0-beta.3, 3.0.0-beta.2,</span><br><span class=\"line\">3.0.0-beta.1, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0,</span><br><span class=\"line\">2.4.1, 2.4.0, 2.3.1, 2.3.0, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.1.0, 2.0.3,</span><br><span class=\"line\">2.0.2, 2.0.1, 2.0.0, 2.0.0-RC3, 2.0.0-RC2, 2.0.0-RC1, 1.3.4, 1.3.3, 1.3.2,</span><br><span class=\"line\">1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.1, 1.0, 1.0RC3, 1.0RC2, 1.0RC1,</span><br><span class=\"line\">0.10.1, 0.10.0, 0.9.2, 0.9.1, 0.9.0, 0.7.0, 0.5.1 [master repo]</span><br><span class=\"line\">- Subspecs:</span><br><span class=\"line\">- AFNetworking/Serialization (3.0.4)</span><br><span class=\"line\">- AFNetworking/Security (3.0.4)</span><br><span class=\"line\">- AFNetworking/Reachability (3.0.4)</span><br><span class=\"line\">- AFNetworking/NSURLSession (3.0.4)</span><br><span class=\"line\">- AFNetworking/UIKit (3.0.4)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; AFNetworking+AutoRetry (0.0.5)</span><br><span class=\"line\">Auto Retries <span class=\"keyword\">for</span> AFNetworking requests</span><br><span class=\"line\">pod <span class=\"string\">'AFNetworking+AutoRetry'</span>, <span class=\"string\">'~&gt; 0.0.5'</span></span><br><span class=\"line\">- Homepage: https://github.com/shaioz/AFNetworking-AutoRetry</span><br><span class=\"line\">- Source:   https://github.com/shaioz/AFNetworking-AutoRetry.git</span><br><span class=\"line\">- Versions: 0.0.5, 0.0.4, 0.0.3, 0.0.2, 0.0.1 [master repo]</span><br><span class=\"line\"></span><br><span class=\"line\">.........太多了，省略</span><br></pre></td></tr></table></figure>\n<p>pod search 是CocoaPods的一个搜索命令,我们可以用来搜索任何托管在CocoaPods上的三方库。    </p>\n<p>使用CocoaPods时需要新建一个 Podfile 的文件,cd 到 我的Demo项目里，Demo目录下有三个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Demo 、  Demo.xcodeproj  、 DemoTests</span><br></pre></td></tr></table></figure>\n<p>新建 Podfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">touch Podfile</span><br></pre></td></tr></table></figure>\n<p>vim 编辑 Podfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim Podfile</span><br></pre></td></tr></table></figure>\n<p>由于是新建的 Podfile 里面应该是空白的。然后我们在里面添加依赖库，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">platform :ios</span><br><span class=\"line\">pod <span class=\"string\">'Reachability'</span>,  <span class=\"string\">'~&gt; 3.0.0'</span></span><br><span class=\"line\">pod <span class=\"string\">'ASIHTTPRequest'</span></span><br></pre></td></tr></table></figure>\n<p>‘~&gt; 3.0.0’ 是 Reachability 的版本号, 设定了版本号CocoaPods就会下载对应的版本,ASIHTTPRequest没指定版本号,CocoaPods就会下载最新版本的ASIHTTPRequest。<br>退出编辑，执行 pod install 下载三方库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n<p>完成后我Demo项目下的文件多了几个:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Demo 、  Demo.xcodeproj  、 DemoTests （之前的三个）</span><br><span class=\"line\"></span><br><span class=\"line\">Demo.xcworkspace 、Podfile 、Podfile.lock 、Pods</span><br></pre></td></tr></table></figure>\n<p>这个时候我们打开Demo项目是点击 Demo.xcworkspace 文件了，到此CocoaPods的基本使用已经讲完了，接下来的CocoaPods的原理，和让我们自己的三方库也支持CocoaPods。</p>\n<p>待续…</p>"},{"layout":"post","title":"HEXO搭建个人博客","date":"2015-08-25T13:15:06.000Z","description":"HEXO配置，HEXO+Github，搭建自己的博客","_content":"\n![HEXO](/img/HEXO.png)\n\n<!--more-->\n\n　经过各种找资料，踩过何种坑，终于搭建好了hexo，域名目前用得时github的，我的hexo是3.1.1版本，hexo不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。\n\n## 正文：\n　这边教程是针对与Mac的，[参考链接](http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool)，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。\n\n　之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。\n\n## 配置环境\n### 安装Node（必须）\n作用：用来生成静态页面的\n到Node.js[官网](https://nodejs.org/)下载相应平台的最新版本，一路安装即可。\n\n### 安装Git（必须）\n作用：把本地的hexo内容提交到github上去.\n安装Xcode就自带有Git，我就不多说了。\n\n### 申请GitHub（必须）\n作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。\n[github](https://github.com/)账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。\n\n### 正式安装HEXO　\nNode和Git都安装好后，可执行如下命令安装hexo：\n\n\tsudo npm install -g hexo\n\n### 初始化\n然后，执行init命令初始化hexo到你指定的目录，我是直接cd到目标目录执行hexo init的。命令：\n\n\n\thexo init\n\n\n好啦，至此，全部安装工作已经完成！\n\n### 生成静态页面\ncd 到你的init目录，执行如下命令，生成静态页面至hexo\\public\\目录。\n\n\thexo generate （hexo g  也可以）   \n\n### 本地启动\n启动本地服务，进行文章预览调试，命令：\n\n\thexo server   \n\n浏览器输入[http://localhost:4000](就可以看到最原始的效果了)\n我不知道你们能不能，反正我不能，因为我还有环境没配置好\n\n我把我报的一些错，和解决方式列出来：\n## 一\n\n\tERROR Plugin load failed: hexo-server\n\n原因：\n\n\n\tBesides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n\n### 解决方法，执行命令：\n\n\tsudo npm install hexo-server\n\n## 二\n执行命令hexo server，有如下提示：\nUsage: hexo<Command>\n....\n\n原因：\n我认为是没有生成本地服务\n解决方法，执行命令：\n\n\tnpm install hexo-server --save\n\n提示：hexo-server@0.1.2 node_modules/hexo-server\n.... \n表示成功了[参考](https://hexo.io/zh-cn/docs/server.html)\n\n这个时候再执行：\n\n\thexo-server\n\n得到:\n\n\tINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n\n这个时候再点击[http://0.0.0.0:4000](http://0.0.0.0:4000)，正常情况下应该是最原始的画面，但是我看到的是：\n白板和Cannot GET /   几个字\n原因：\n由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n\n\tnpm install hexo-renderer-ejs --save\n\tnpm install hexo-renderer-stylus --save\n\tnpm install hexo-renderer-marked --save\n\n这个时候再重新生成静态文件，命令：\n\n\thexo generate （或hexo g）\n\n启动本地服务器：\n\n\thexo server （或hexo s）\n\n再点击网址[http://0.0.0.0:4000](http://0.0.0.0:4000) OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。[参考链接](https://disqus.com/home/discussion/bsspirit/hexogithubweb/)，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。\n\n## 配置Github\n### 建立Repository\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法\n然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：\n\n\t_config.yml\tnode_modules\tpublic\t\tsource　　　　\n\tdb.json\t\tpackage.json\tscaffolds\tthemes　　　　　\n\n现在我们需要_config.yml文件，来建立关联，命令：\n\n\tvim _config.yml\n\n翻到最下面，改成我这样子的\n\n\tdeploy:\n\t  type: git\n\t  repository: https://github.com/leopardpan/leopardpan.github.io.git\n\t  branch: master\n\n执行如下命令才能使用git部署\n\n\tnpm install hexo-deployer-git--save\n\n网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。\n忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。\n然后，执行配置命令：\n\n\thexo deploy\n\n　然后再浏览器中输入[http://leopardpan.github.io/](http://leopardpan.github.io/)就行了，我的github的账户叫leopardpan,把这个改成你github的账户名就行了\n### 部署步骤\n每次部署的步骤，可按以下三步来进行。\n\n\thexo clean\n\thexo generate\n\thexo deploy\n\n一些常用命令：\n\n\thexo new \"postName\" #新建文章\n\thexo new page \"pageName\" #新建页面\n\thexo generate #生成静态页面至public目录\n\thexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\thexo deploy #将.deploy目录部署到GitHub\n\thexo help  # 查看帮助\n\thexo version  #查看Hexo的版本\n\n这里有大量的[主题列表](https://github.com/hexojs/hexo/wiki/Themes)使用方法里面\n都有详细的介绍，我就不多说了。\n我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，?\n　[Cover](https://github.com/daisygao/hexo-themes-cover) - A chic theme with facebook-like cover photo\n　[Oishi](https://github.com/henryhuang/oishi) - A white theme based on Landscape plus and Writing.\n　[Sidebar](https://github.com/hardywu/hexo-theme-sidebar) - Another theme based on Light with a simple sidebar \n　[TKL](https://github.com/SuperKieran/TKL) - A responsive design theme for Hexo. 一个设计优雅的响应式主题\n　[Tinnypp](https://github.com/levonlin/Tinnypp) - A clean, simple theme based on Tinny\n　[Writing](https://github.com/yunlzheng/hexo-themes-writing) - A small and simple hexo theme based on Light\n　[Yilia](https://github.com/litten/hexo-theme-yilia) - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。\n　[Pacman voidy](https://github.com/Voidly/pacman) - A theme with dynamic tagcloud and dynamic snow\n\n## 一些基本路径\n　文章在source/_posts，如果你不怕麻烦的话可以跟我一样直接用vim去编辑，支持markdown语法，你有好的编辑软件，给我也推荐下，感激不尽?。如果想修改头像可以直接在主题的_config.yml文件里面修改，友情链接，之类的都在这里，修改名字在public/index.html里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。\n\n## Markdown语法参考链接\n[很实用的例子](https://www.zybuluo.com/mdeditor)\n转载请注明原地址，潘柏信的博客：[http://leopardpan.github.io](http://leopardpan.github.io) 谢谢！\n","source":"_posts/HEXO搭建个人博客.md","raw":"---\nlayout: post\ntitle: \"HEXO搭建个人博客\"\ndate: 2015-08-25 21:15:06 \ndescription: \"HEXO配置，HEXO+Github，搭建自己的博客\"\ncategory: 博客\n---\n\n![HEXO](/img/HEXO.png)\n\n<!--more-->\n\n　经过各种找资料，踩过何种坑，终于搭建好了hexo，域名目前用得时github的，我的hexo是3.1.1版本，hexo不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。\n\n## 正文：\n　这边教程是针对与Mac的，[参考链接](http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool)，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。\n\n　之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。\n\n## 配置环境\n### 安装Node（必须）\n作用：用来生成静态页面的\n到Node.js[官网](https://nodejs.org/)下载相应平台的最新版本，一路安装即可。\n\n### 安装Git（必须）\n作用：把本地的hexo内容提交到github上去.\n安装Xcode就自带有Git，我就不多说了。\n\n### 申请GitHub（必须）\n作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。\n[github](https://github.com/)账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。\n\n### 正式安装HEXO　\nNode和Git都安装好后，可执行如下命令安装hexo：\n\n\tsudo npm install -g hexo\n\n### 初始化\n然后，执行init命令初始化hexo到你指定的目录，我是直接cd到目标目录执行hexo init的。命令：\n\n\n\thexo init\n\n\n好啦，至此，全部安装工作已经完成！\n\n### 生成静态页面\ncd 到你的init目录，执行如下命令，生成静态页面至hexo\\public\\目录。\n\n\thexo generate （hexo g  也可以）   \n\n### 本地启动\n启动本地服务，进行文章预览调试，命令：\n\n\thexo server   \n\n浏览器输入[http://localhost:4000](就可以看到最原始的效果了)\n我不知道你们能不能，反正我不能，因为我还有环境没配置好\n\n我把我报的一些错，和解决方式列出来：\n## 一\n\n\tERROR Plugin load failed: hexo-server\n\n原因：\n\n\n\tBesides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n\n### 解决方法，执行命令：\n\n\tsudo npm install hexo-server\n\n## 二\n执行命令hexo server，有如下提示：\nUsage: hexo<Command>\n....\n\n原因：\n我认为是没有生成本地服务\n解决方法，执行命令：\n\n\tnpm install hexo-server --save\n\n提示：hexo-server@0.1.2 node_modules/hexo-server\n.... \n表示成功了[参考](https://hexo.io/zh-cn/docs/server.html)\n\n这个时候再执行：\n\n\thexo-server\n\n得到:\n\n\tINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n\n这个时候再点击[http://0.0.0.0:4000](http://0.0.0.0:4000)，正常情况下应该是最原始的画面，但是我看到的是：\n白板和Cannot GET /   几个字\n原因：\n由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：\n\n\tnpm install hexo-renderer-ejs --save\n\tnpm install hexo-renderer-stylus --save\n\tnpm install hexo-renderer-marked --save\n\n这个时候再重新生成静态文件，命令：\n\n\thexo generate （或hexo g）\n\n启动本地服务器：\n\n\thexo server （或hexo s）\n\n再点击网址[http://0.0.0.0:4000](http://0.0.0.0:4000) OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。[参考链接](https://disqus.com/home/discussion/bsspirit/hexogithubweb/)，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。\n\n## 配置Github\n### 建立Repository\n建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法\n然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：\n\n\t_config.yml\tnode_modules\tpublic\t\tsource　　　　\n\tdb.json\t\tpackage.json\tscaffolds\tthemes　　　　　\n\n现在我们需要_config.yml文件，来建立关联，命令：\n\n\tvim _config.yml\n\n翻到最下面，改成我这样子的\n\n\tdeploy:\n\t  type: git\n\t  repository: https://github.com/leopardpan/leopardpan.github.io.git\n\t  branch: master\n\n执行如下命令才能使用git部署\n\n\tnpm install hexo-deployer-git--save\n\n网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。\n忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。\n然后，执行配置命令：\n\n\thexo deploy\n\n　然后再浏览器中输入[http://leopardpan.github.io/](http://leopardpan.github.io/)就行了，我的github的账户叫leopardpan,把这个改成你github的账户名就行了\n### 部署步骤\n每次部署的步骤，可按以下三步来进行。\n\n\thexo clean\n\thexo generate\n\thexo deploy\n\n一些常用命令：\n\n\thexo new \"postName\" #新建文章\n\thexo new page \"pageName\" #新建页面\n\thexo generate #生成静态页面至public目录\n\thexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\thexo deploy #将.deploy目录部署到GitHub\n\thexo help  # 查看帮助\n\thexo version  #查看Hexo的版本\n\n这里有大量的[主题列表](https://github.com/hexojs/hexo/wiki/Themes)使用方法里面\n都有详细的介绍，我就不多说了。\n我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，?\n　[Cover](https://github.com/daisygao/hexo-themes-cover) - A chic theme with facebook-like cover photo\n　[Oishi](https://github.com/henryhuang/oishi) - A white theme based on Landscape plus and Writing.\n　[Sidebar](https://github.com/hardywu/hexo-theme-sidebar) - Another theme based on Light with a simple sidebar \n　[TKL](https://github.com/SuperKieran/TKL) - A responsive design theme for Hexo. 一个设计优雅的响应式主题\n　[Tinnypp](https://github.com/levonlin/Tinnypp) - A clean, simple theme based on Tinny\n　[Writing](https://github.com/yunlzheng/hexo-themes-writing) - A small and simple hexo theme based on Light\n　[Yilia](https://github.com/litten/hexo-theme-yilia) - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。\n　[Pacman voidy](https://github.com/Voidly/pacman) - A theme with dynamic tagcloud and dynamic snow\n\n## 一些基本路径\n　文章在source/_posts，如果你不怕麻烦的话可以跟我一样直接用vim去编辑，支持markdown语法，你有好的编辑软件，给我也推荐下，感激不尽?。如果想修改头像可以直接在主题的_config.yml文件里面修改，友情链接，之类的都在这里，修改名字在public/index.html里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。\n\n## Markdown语法参考链接\n[很实用的例子](https://www.zybuluo.com/mdeditor)\n转载请注明原地址，潘柏信的博客：[http://leopardpan.github.io](http://leopardpan.github.io) 谢谢！\n","slug":"HEXO搭建个人博客","published":1,"updated":"2016-04-26T01:52:56.000Z","comments":1,"photos":[],"link":"","_id":"cini7ichv0001kofys5mmtji2","content":"<p><img src=\"/img/HEXO.png\" alt=\"HEXO\"></p>\n<a id=\"more\"></a>\n<p>　经过各种找资料，踩过何种坑，终于搭建好了hexo，域名目前用得时github的，我的hexo是3.1.1版本，hexo不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。</p>\n<h2 id=\"正文：\"><a href=\"#正文：\" class=\"headerlink\" title=\"正文：\"></a>正文：</h2><p>　这边教程是针对与Mac的，<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool\" target=\"_blank\" rel=\"external\">参考链接</a>，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。</p>\n<p>　之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。</p>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"安装Node（必须）\"><a href=\"#安装Node（必须）\" class=\"headerlink\" title=\"安装Node（必须）\"></a>安装Node（必须）</h3><p>作用：用来生成静态页面的<br>到Node.js<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">官网</a>下载相应平台的最新版本，一路安装即可。</p>\n<h3 id=\"安装Git（必须）\"><a href=\"#安装Git（必须）\" class=\"headerlink\" title=\"安装Git（必须）\"></a>安装Git（必须）</h3><p>作用：把本地的hexo内容提交到github上去.<br>安装Xcode就自带有Git，我就不多说了。</p>\n<h3 id=\"申请GitHub（必须）\"><a href=\"#申请GitHub（必须）\" class=\"headerlink\" title=\"申请GitHub（必须）\"></a>申请GitHub（必须）</h3><p>作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。<br><a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。</p>\n<h3 id=\"正式安装HEXO\"><a href=\"#正式安装HEXO\" class=\"headerlink\" title=\"正式安装HEXO　\"></a>正式安装HEXO　</h3><p>Node和Git都安装好后，可执行如下命令安装hexo：</p>\n<pre><code>sudo npm install -g hexo\n</code></pre><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>然后，执行init命令初始化hexo到你指定的目录，我是直接cd到目标目录执行hexo init的。命令：</p>\n<pre><code>hexo init\n</code></pre><p>好啦，至此，全部安装工作已经完成！</p>\n<h3 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h3><p>cd 到你的init目录，执行如下命令，生成静态页面至hexo\\public\\目录。</p>\n<pre><code>hexo generate （hexo g  也可以）   \n</code></pre><h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><p>启动本地服务，进行文章预览调试，命令：</p>\n<pre><code>hexo server   \n</code></pre><p>浏览器输入<a href=\"就可以看到最原始的效果了\">http://localhost:4000</a><br>我不知道你们能不能，反正我不能，因为我还有环境没配置好</p>\n<p>我把我报的一些错，和解决方式列出来：</p>\n<h2 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h2><pre><code>ERROR Plugin load failed: hexo-server\n</code></pre><p>原因：</p>\n<pre><code>Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n</code></pre><h3 id=\"解决方法，执行命令：\"><a href=\"#解决方法，执行命令：\" class=\"headerlink\" title=\"解决方法，执行命令：\"></a>解决方法，执行命令：</h3><pre><code>sudo npm install hexo-server\n</code></pre><h2 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h2><p>执行命令hexo server，有如下提示：<br>Usage: hexo<command><br>….</p>\n<p>原因：<br>我认为是没有生成本地服务<br>解决方法，执行命令：</p>\n<pre><code>npm install hexo-server --save\n</code></pre><p>提示：hexo-server@0.1.2 node_modules/hexo-server<br>….<br>表示成功了<a href=\"https://hexo.io/zh-cn/docs/server.html\" target=\"_blank\" rel=\"external\">参考</a></p>\n<p>这个时候再执行：</p>\n<pre><code>hexo-server\n</code></pre><p>得到:</p>\n<pre><code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n</code></pre><p>这个时候再点击<a href=\"http://0.0.0.0:4000\" target=\"_blank\" rel=\"external\">http://0.0.0.0:4000</a>，正常情况下应该是最原始的画面，但是我看到的是：<br>白板和Cannot GET /   几个字<br>原因：<br>由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>\n<pre><code>npm install hexo-renderer-ejs --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-renderer-marked --save\n</code></pre><p>这个时候再重新生成静态文件，命令：</p>\n<pre><code>hexo generate （或hexo g）\n</code></pre><p>启动本地服务器：</p>\n<pre><code>hexo server （或hexo s）\n</code></pre><p>再点击网址<a href=\"http://0.0.0.0:4000\" target=\"_blank\" rel=\"external\">http://0.0.0.0:4000</a> OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。<a href=\"https://disqus.com/home/discussion/bsspirit/hexogithubweb/\" target=\"_blank\" rel=\"external\">参考链接</a>，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。</p>\n<h2 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h2><h3 id=\"建立Repository\"><a href=\"#建立Repository\" class=\"headerlink\" title=\"建立Repository\"></a>建立Repository</h3><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法<br>然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：</p>\n<pre><code>_config.yml    node_modules    public        source　　　　\ndb.json        package.json    scaffolds    themes　　　　　\n</code></pre><p>现在我们需要_config.yml文件，来建立关联，命令：</p>\n<pre><code>vim _config.yml\n</code></pre><p>翻到最下面，改成我这样子的</p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/leopardpan/leopardpan.github.io.git\n  branch: master\n</code></pre><p>执行如下命令才能使用git部署</p>\n<pre><code>npm install hexo-deployer-git--save\n</code></pre><p>网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。<br>忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。<br>然后，执行配置命令：</p>\n<pre><code>hexo deploy\n</code></pre><p>　然后再浏览器中输入<a href=\"http://leopardpan.github.io/\" target=\"_blank\" rel=\"external\">http://leopardpan.github.io/</a>就行了，我的github的账户叫leopardpan,把这个改成你github的账户名就行了</p>\n<h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。</p>\n<pre><code>hexo clean\nhexo generate\nhexo deploy\n</code></pre><p>一些常用命令：</p>\n<pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\n</code></pre><p>这里有大量的<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">主题列表</a>使用方法里面<br>都有详细的介绍，我就不多说了。<br>我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，?<br>　<a href=\"https://github.com/daisygao/hexo-themes-cover\" target=\"_blank\" rel=\"external\">Cover</a> - A chic theme with facebook-like cover photo<br>　<a href=\"https://github.com/henryhuang/oishi\" target=\"_blank\" rel=\"external\">Oishi</a> - A white theme based on Landscape plus and Writing.<br>　<a href=\"https://github.com/hardywu/hexo-theme-sidebar\" target=\"_blank\" rel=\"external\">Sidebar</a> - Another theme based on Light with a simple sidebar<br>　<a href=\"https://github.com/SuperKieran/TKL\" target=\"_blank\" rel=\"external\">TKL</a> - A responsive design theme for Hexo. 一个设计优雅的响应式主题<br>　<a href=\"https://github.com/levonlin/Tinnypp\" target=\"_blank\" rel=\"external\">Tinnypp</a> - A clean, simple theme based on Tinny<br>　<a href=\"https://github.com/yunlzheng/hexo-themes-writing\" target=\"_blank\" rel=\"external\">Writing</a> - A small and simple hexo theme based on Light<br>　<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">Yilia</a> - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。<br>　<a href=\"https://github.com/Voidly/pacman\" target=\"_blank\" rel=\"external\">Pacman voidy</a> - A theme with dynamic tagcloud and dynamic snow</p>\n<h2 id=\"一些基本路径\"><a href=\"#一些基本路径\" class=\"headerlink\" title=\"一些基本路径\"></a>一些基本路径</h2><p>　文章在source/_posts，如果你不怕麻烦的话可以跟我一样直接用vim去编辑，支持markdown语法，你有好的编辑软件，给我也推荐下，感激不尽?。如果想修改头像可以直接在主题的_config.yml文件里面修改，友情链接，之类的都在这里，修改名字在public/index.html里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。</p>\n<h2 id=\"Markdown语法参考链接\"><a href=\"#Markdown语法参考链接\" class=\"headerlink\" title=\"Markdown语法参考链接\"></a>Markdown语法参考链接</h2><p><a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"external\">很实用的例子</a><br>转载请注明原地址，潘柏信的博客：<a href=\"http://leopardpan.github.io\" target=\"_blank\" rel=\"external\">http://leopardpan.github.io</a> 谢谢！</p>\n","excerpt":"<p><img src=\"/img/HEXO.png\" alt=\"HEXO\"></p>","more":"<p>　经过各种找资料，踩过何种坑，终于搭建好了hexo，域名目前用得时github的，我的hexo是3.1.1版本，hexo不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。</p>\n<h2 id=\"正文：\"><a href=\"#正文：\" class=\"headerlink\" title=\"正文：\"></a>正文：</h2><p>　这边教程是针对与Mac的，<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/?utm_source=tuicool\">参考链接</a>，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。</p>\n<p>　之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。</p>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"安装Node（必须）\"><a href=\"#安装Node（必须）\" class=\"headerlink\" title=\"安装Node（必须）\"></a>安装Node（必须）</h3><p>作用：用来生成静态页面的<br>到Node.js<a href=\"https://nodejs.org/\">官网</a>下载相应平台的最新版本，一路安装即可。</p>\n<h3 id=\"安装Git（必须）\"><a href=\"#安装Git（必须）\" class=\"headerlink\" title=\"安装Git（必须）\"></a>安装Git（必须）</h3><p>作用：把本地的hexo内容提交到github上去.<br>安装Xcode就自带有Git，我就不多说了。</p>\n<h3 id=\"申请GitHub（必须）\"><a href=\"#申请GitHub（必须）\" class=\"headerlink\" title=\"申请GitHub（必须）\"></a>申请GitHub（必须）</h3><p>作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。<br><a href=\"https://github.com/\">github</a>账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。</p>\n<h3 id=\"正式安装HEXO\"><a href=\"#正式安装HEXO\" class=\"headerlink\" title=\"正式安装HEXO　\"></a>正式安装HEXO　</h3><p>Node和Git都安装好后，可执行如下命令安装hexo：</p>\n<pre><code>sudo npm install -g hexo\n</code></pre><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>然后，执行init命令初始化hexo到你指定的目录，我是直接cd到目标目录执行hexo init的。命令：</p>\n<pre><code>hexo init\n</code></pre><p>好啦，至此，全部安装工作已经完成！</p>\n<h3 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h3><p>cd 到你的init目录，执行如下命令，生成静态页面至hexo\\public\\目录。</p>\n<pre><code>hexo generate （hexo g  也可以）   \n</code></pre><h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><p>启动本地服务，进行文章预览调试，命令：</p>\n<pre><code>hexo server   \n</code></pre><p>浏览器输入<a href=\"就可以看到最原始的效果了\">http://localhost:4000</a><br>我不知道你们能不能，反正我不能，因为我还有环境没配置好</p>\n<p>我把我报的一些错，和解决方式列出来：</p>\n<h2 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h2><pre><code>ERROR Plugin load failed: hexo-server\n</code></pre><p>原因：</p>\n<pre><code>Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n</code></pre><h3 id=\"解决方法，执行命令：\"><a href=\"#解决方法，执行命令：\" class=\"headerlink\" title=\"解决方法，执行命令：\"></a>解决方法，执行命令：</h3><pre><code>sudo npm install hexo-server\n</code></pre><h2 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h2><p>执行命令hexo server，有如下提示：<br>Usage: hexo<Command><br>….</p>\n<p>原因：<br>我认为是没有生成本地服务<br>解决方法，执行命令：</p>\n<pre><code>npm install hexo-server --save\n</code></pre><p>提示：hexo-server@0.1.2 node_modules/hexo-server<br>….<br>表示成功了<a href=\"https://hexo.io/zh-cn/docs/server.html\">参考</a></p>\n<p>这个时候再执行：</p>\n<pre><code>hexo-server\n</code></pre><p>得到:</p>\n<pre><code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n</code></pre><p>这个时候再点击<a href=\"http://0.0.0.0:4000\">http://0.0.0.0:4000</a>，正常情况下应该是最原始的画面，但是我看到的是：<br>白板和Cannot GET /   几个字<br>原因：<br>由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令：</p>\n<pre><code>npm install hexo-renderer-ejs --save\nnpm install hexo-renderer-stylus --save\nnpm install hexo-renderer-marked --save\n</code></pre><p>这个时候再重新生成静态文件，命令：</p>\n<pre><code>hexo generate （或hexo g）\n</code></pre><p>启动本地服务器：</p>\n<pre><code>hexo server （或hexo s）\n</code></pre><p>再点击网址<a href=\"http://0.0.0.0:4000\">http://0.0.0.0:4000</a> OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。<a href=\"https://disqus.com/home/discussion/bsspirit/hexogithubweb/\">参考链接</a>，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。</p>\n<h2 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h2><h3 id=\"建立Repository\"><a href=\"#建立Repository\" class=\"headerlink\" title=\"建立Repository\"></a>建立Repository</h3><p>建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法<br>然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有：</p>\n<pre><code>_config.yml    node_modules    public        source　　　　\ndb.json        package.json    scaffolds    themes　　　　　\n</code></pre><p>现在我们需要_config.yml文件，来建立关联，命令：</p>\n<pre><code>vim _config.yml\n</code></pre><p>翻到最下面，改成我这样子的</p>\n<pre><code>deploy:\n  type: git\n  repository: https://github.com/leopardpan/leopardpan.github.io.git\n  branch: master\n</code></pre><p>执行如下命令才能使用git部署</p>\n<pre><code>npm install hexo-deployer-git--save\n</code></pre><p>网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。<br>忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。<br>然后，执行配置命令：</p>\n<pre><code>hexo deploy\n</code></pre><p>　然后再浏览器中输入<a href=\"http://leopardpan.github.io/\">http://leopardpan.github.io/</a>就行了，我的github的账户叫leopardpan,把这个改成你github的账户名就行了</p>\n<h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。</p>\n<pre><code>hexo clean\nhexo generate\nhexo deploy\n</code></pre><p>一些常用命令：</p>\n<pre><code>hexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help  # 查看帮助\nhexo version  #查看Hexo的版本\n</code></pre><p>这里有大量的<a href=\"https://github.com/hexojs/hexo/wiki/Themes\">主题列表</a>使用方法里面<br>都有详细的介绍，我就不多说了。<br>我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，?<br>　<a href=\"https://github.com/daisygao/hexo-themes-cover\">Cover</a> - A chic theme with facebook-like cover photo<br>　<a href=\"https://github.com/henryhuang/oishi\">Oishi</a> - A white theme based on Landscape plus and Writing.<br>　<a href=\"https://github.com/hardywu/hexo-theme-sidebar\">Sidebar</a> - Another theme based on Light with a simple sidebar<br>　<a href=\"https://github.com/SuperKieran/TKL\">TKL</a> - A responsive design theme for Hexo. 一个设计优雅的响应式主题<br>　<a href=\"https://github.com/levonlin/Tinnypp\">Tinnypp</a> - A clean, simple theme based on Tinny<br>　<a href=\"https://github.com/yunlzheng/hexo-themes-writing\">Writing</a> - A small and simple hexo theme based on Light<br>　<a href=\"https://github.com/litten/hexo-theme-yilia\">Yilia</a> - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。<br>　<a href=\"https://github.com/Voidly/pacman\">Pacman voidy</a> - A theme with dynamic tagcloud and dynamic snow</p>\n<h2 id=\"一些基本路径\"><a href=\"#一些基本路径\" class=\"headerlink\" title=\"一些基本路径\"></a>一些基本路径</h2><p>　文章在source/_posts，如果你不怕麻烦的话可以跟我一样直接用vim去编辑，支持markdown语法，你有好的编辑软件，给我也推荐下，感激不尽?。如果想修改头像可以直接在主题的_config.yml文件里面修改，友情链接，之类的都在这里，修改名字在public/index.html里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。</p>\n<h2 id=\"Markdown语法参考链接\"><a href=\"#Markdown语法参考链接\" class=\"headerlink\" title=\"Markdown语法参考链接\"></a>Markdown语法参考链接</h2><p><a href=\"https://www.zybuluo.com/mdeditor\">很实用的例子</a><br>转载请注明原地址，潘柏信的博客：<a href=\"http://leopardpan.github.io\">http://leopardpan.github.io</a> 谢谢！</p>"},{"title":"HEXO进阶","_content":"\n![HEXO进阶](/img/HEXO1.png)\n\n<!--more-->\n\n# HEXO进阶\n\n* 1、博客部署样式出问题了怎么办？\n* 2、电脑重装或者误删了本地博客怎么办？\n* 3、想使用两台电脑写博客怎么办？\n* 4、为何使用百度搜不到我的博客？\n\n最近有好多朋友问我类似的问题, 同样也是我想解决的问题, 下面我会一个一个的介绍怎么解决上面的几个问题。\n\n### 使用Jekyll解决前三个问题。\n不得不说 `Jekyll` 确实可以解决我上面三个问题, 因为 `Jekyll` 是直接把Markdown格式的文章直接放在github仓库里的, 相当于直接用git来管理博客了, `Github` 官方也很推荐 `Jekyll` 。 你可以先看下 `Jekyll` 搭建博客的[voyagelab](voyagelab.github.io), [github地址](https://github.com/voyagelab/voyagelab.github.io), 当然了这只是很普通的, Jekyll 也有很多主题可以选择的, 更详细的请看[Jekyll中文文档](http://jekyll.bootcss.com/)、[Jekyll英文文档](https://jekyllrb.com/)、[Jekyll主题列表](http://jekyllthemes.org/)。\n在 `Jekyll` 上逛了一个星期的我又回到了 `Hexo` , 发现 目前 `Jekyll` 对主题和一些插件的支持相对 `Hexo` 来说, 没那么友好, 可能有一些其它的方法只是我没找到而已,关于 `Jekyll` 搭建博客就介绍到这, 如果有问题的话可以评论, 或者联系我。\n\n### 使用Hexo解决上面前三个问题\n是的, 我大`Hexo`同样可以解决上面三个问题, 那就是使用git。关于如何使用 `Hexo` 搭建博客请看我另一篇文章[HEXO搭建个人博客](http://www.baixin.io/2015/08/25/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/), 如果搭建的过程中出现了问题, 我们可以交流交流。现在我假设你已经能基本使用 `Hexo` 了, 接下来就看看如何来管理博客。\n\n## 使用git管理博客\n[Blog-Growing](https://github.com/leopardpan/Blog-Growing)是我管理博客的仓库地址。结构大致是:\n\n* Blog-Growing\n    * .git\n    * .gitignore\n    * Hexo\n        *   ..\n        *   ..\n        *   整个博客的配置信息\n\n你可以把我的的[Blog-Growing](https://github.com/leopardpan/Blog-Growing) clone下来, 看看一些基本配置是怎么配置的。需要提醒的是, `要把主题下的.git给删除掉` , 当然了你也可以使用 `git submodule` 来管理, 具体的管理方法我这里就不做多的介绍了, 想了解的话可以私信我。\n上面的过程基本做完后, 怎么来解决我开篇提的前三个问题了。\n\n### 具体实现:\n**一：家里电脑使用博客**       \n建立git远端仓库管理博客,并使用家里的电脑把本地博客的配置推送到远端仓库。\n**二：公司电脑使用博客**       \n到了公司只需要执行`sudo npm install -g hexo`,然后cd到你的博客目录下,如我cd 到Hexo目录下, 然后执行 `hexo server` 就可以在本地预览博客了。\n**三：使用Git保存**       \n修改好博客后记得先使用git来提交下, 即使下次把博客的样式修改坏了, 也可以使用 `git reset --hard` 来回退。如: 我cd 到 `Blog-Growing` 目录下使用git提交。\n**四：博客提交**        \n1、修改好的博客使用 `hexo d` 展示到博客页上。\n2、git push 整个本地博客。\n\n**提示:** 在这里 `git` 仅仅只是用户做博客的版本管理的, 博客的样式修改、基本部署还是使用 `hexo` 来操作的。\n\n## 让百度能搜索到你的博客\n\n### 为什么要使用百度搜索？\n有人可能会说作为一个开发人员, 你不会用 `Google` 啊。 是的, Google是能搜到我们搭建在 `Github Page` 的博客, 会用`Google` 也是一个开发人员必备技能之一。但是, 我们生活在天朝, 所以百度还是总有会用到的时候, 或者是你想让更多的天朝人能搜到你。\n\n### 为什么使用百度搜索不到 `Github Page` 上的博客？\n有人联系过 ` Github Support 部门` , 给出大致的意思就是: 百度爬虫爬得太猛烈，已经对很多 Github 用户造成了问题。所以 Github 将禁止百度爬虫的爬取。\n### 如何让百度能搜索你的博客?\n根据上面说的, 目前发现只是Github Page禁止了百度搜索, 所以让百度能搜索到你的博客还是有一些方法的。例如:\n* 自己搞个VPS,博客部署在VPS上。\n* 博客部署 `Coding.net` 上, `GitCafe`已经合并到 `Coding` 。\n我使用的是第二种方法, 博客部署在 `Coding.net` 上也相对简单些。\n#### 在Coding上部署你的博客。\nCoding同样支持Hexo、Jekyll等博客的部署, Coding 跟Github还是挺像的,而且是中文。 同样的在Coding里面建一个项目,项目名字跟你的用户名一样,这里我就不啰嗦了, 说几个需要注意的地方:\n**注意一:**\n在`Coding Page` 上部署博客,需要把博客推送到`coding-pages ` 分支上, 分支名字是固定的。\n**注意二:**\n`Coding Page` 不支持自定义CNAME, 你需要点击到Page模块,然后添加一个域名来绑定。\n\n更详细的请看[Coding Pages 官网介绍](https://coding.net/help/doc/pages/index.html).\n\n参考文章:\n[解决 Github Pages 禁止百度爬虫的方法与可行性分析](http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/)","source":"_posts/HEXO进阶.md","raw":"---\ntitle: HEXO进阶\ncategory: 博客\n---\n\n![HEXO进阶](/img/HEXO1.png)\n\n<!--more-->\n\n# HEXO进阶\n\n* 1、博客部署样式出问题了怎么办？\n* 2、电脑重装或者误删了本地博客怎么办？\n* 3、想使用两台电脑写博客怎么办？\n* 4、为何使用百度搜不到我的博客？\n\n最近有好多朋友问我类似的问题, 同样也是我想解决的问题, 下面我会一个一个的介绍怎么解决上面的几个问题。\n\n### 使用Jekyll解决前三个问题。\n不得不说 `Jekyll` 确实可以解决我上面三个问题, 因为 `Jekyll` 是直接把Markdown格式的文章直接放在github仓库里的, 相当于直接用git来管理博客了, `Github` 官方也很推荐 `Jekyll` 。 你可以先看下 `Jekyll` 搭建博客的[voyagelab](voyagelab.github.io), [github地址](https://github.com/voyagelab/voyagelab.github.io), 当然了这只是很普通的, Jekyll 也有很多主题可以选择的, 更详细的请看[Jekyll中文文档](http://jekyll.bootcss.com/)、[Jekyll英文文档](https://jekyllrb.com/)、[Jekyll主题列表](http://jekyllthemes.org/)。\n在 `Jekyll` 上逛了一个星期的我又回到了 `Hexo` , 发现 目前 `Jekyll` 对主题和一些插件的支持相对 `Hexo` 来说, 没那么友好, 可能有一些其它的方法只是我没找到而已,关于 `Jekyll` 搭建博客就介绍到这, 如果有问题的话可以评论, 或者联系我。\n\n### 使用Hexo解决上面前三个问题\n是的, 我大`Hexo`同样可以解决上面三个问题, 那就是使用git。关于如何使用 `Hexo` 搭建博客请看我另一篇文章[HEXO搭建个人博客](http://www.baixin.io/2015/08/25/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/), 如果搭建的过程中出现了问题, 我们可以交流交流。现在我假设你已经能基本使用 `Hexo` 了, 接下来就看看如何来管理博客。\n\n## 使用git管理博客\n[Blog-Growing](https://github.com/leopardpan/Blog-Growing)是我管理博客的仓库地址。结构大致是:\n\n* Blog-Growing\n    * .git\n    * .gitignore\n    * Hexo\n        *   ..\n        *   ..\n        *   整个博客的配置信息\n\n你可以把我的的[Blog-Growing](https://github.com/leopardpan/Blog-Growing) clone下来, 看看一些基本配置是怎么配置的。需要提醒的是, `要把主题下的.git给删除掉` , 当然了你也可以使用 `git submodule` 来管理, 具体的管理方法我这里就不做多的介绍了, 想了解的话可以私信我。\n上面的过程基本做完后, 怎么来解决我开篇提的前三个问题了。\n\n### 具体实现:\n**一：家里电脑使用博客**       \n建立git远端仓库管理博客,并使用家里的电脑把本地博客的配置推送到远端仓库。\n**二：公司电脑使用博客**       \n到了公司只需要执行`sudo npm install -g hexo`,然后cd到你的博客目录下,如我cd 到Hexo目录下, 然后执行 `hexo server` 就可以在本地预览博客了。\n**三：使用Git保存**       \n修改好博客后记得先使用git来提交下, 即使下次把博客的样式修改坏了, 也可以使用 `git reset --hard` 来回退。如: 我cd 到 `Blog-Growing` 目录下使用git提交。\n**四：博客提交**        \n1、修改好的博客使用 `hexo d` 展示到博客页上。\n2、git push 整个本地博客。\n\n**提示:** 在这里 `git` 仅仅只是用户做博客的版本管理的, 博客的样式修改、基本部署还是使用 `hexo` 来操作的。\n\n## 让百度能搜索到你的博客\n\n### 为什么要使用百度搜索？\n有人可能会说作为一个开发人员, 你不会用 `Google` 啊。 是的, Google是能搜到我们搭建在 `Github Page` 的博客, 会用`Google` 也是一个开发人员必备技能之一。但是, 我们生活在天朝, 所以百度还是总有会用到的时候, 或者是你想让更多的天朝人能搜到你。\n\n### 为什么使用百度搜索不到 `Github Page` 上的博客？\n有人联系过 ` Github Support 部门` , 给出大致的意思就是: 百度爬虫爬得太猛烈，已经对很多 Github 用户造成了问题。所以 Github 将禁止百度爬虫的爬取。\n### 如何让百度能搜索你的博客?\n根据上面说的, 目前发现只是Github Page禁止了百度搜索, 所以让百度能搜索到你的博客还是有一些方法的。例如:\n* 自己搞个VPS,博客部署在VPS上。\n* 博客部署 `Coding.net` 上, `GitCafe`已经合并到 `Coding` 。\n我使用的是第二种方法, 博客部署在 `Coding.net` 上也相对简单些。\n#### 在Coding上部署你的博客。\nCoding同样支持Hexo、Jekyll等博客的部署, Coding 跟Github还是挺像的,而且是中文。 同样的在Coding里面建一个项目,项目名字跟你的用户名一样,这里我就不啰嗦了, 说几个需要注意的地方:\n**注意一:**\n在`Coding Page` 上部署博客,需要把博客推送到`coding-pages ` 分支上, 分支名字是固定的。\n**注意二:**\n`Coding Page` 不支持自定义CNAME, 你需要点击到Page模块,然后添加一个域名来绑定。\n\n更详细的请看[Coding Pages 官网介绍](https://coding.net/help/doc/pages/index.html).\n\n参考文章:\n[解决 Github Pages 禁止百度爬虫的方法与可行性分析](http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/)","slug":"HEXO进阶","published":1,"date":"2016-04-26T01:52:56.000Z","updated":"2016-04-27T01:42:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cini7ici10003kofy9h1hdt5s","content":"<p><img src=\"/img/HEXO1.png\" alt=\"HEXO进阶\"></p>\n<a id=\"more\"></a>\n<h1 id=\"HEXO进阶\"><a href=\"#HEXO进阶\" class=\"headerlink\" title=\"HEXO进阶\"></a>HEXO进阶</h1><ul>\n<li>1、博客部署样式出问题了怎么办？</li>\n<li>2、电脑重装或者误删了本地博客怎么办？</li>\n<li>3、想使用两台电脑写博客怎么办？</li>\n<li>4、为何使用百度搜不到我的博客？</li>\n</ul>\n<p>最近有好多朋友问我类似的问题, 同样也是我想解决的问题, 下面我会一个一个的介绍怎么解决上面的几个问题。</p>\n<h3 id=\"使用Jekyll解决前三个问题。\"><a href=\"#使用Jekyll解决前三个问题。\" class=\"headerlink\" title=\"使用Jekyll解决前三个问题。\"></a>使用Jekyll解决前三个问题。</h3><p>不得不说 <code>Jekyll</code> 确实可以解决我上面三个问题, 因为 <code>Jekyll</code> 是直接把Markdown格式的文章直接放在github仓库里的, 相当于直接用git来管理博客了, <code>Github</code> 官方也很推荐 <code>Jekyll</code> 。 你可以先看下 <code>Jekyll</code> 搭建博客的<a href=\"voyagelab.github.io\">voyagelab</a>, <a href=\"https://github.com/voyagelab/voyagelab.github.io\" target=\"_blank\" rel=\"external\">github地址</a>, 当然了这只是很普通的, Jekyll 也有很多主题可以选择的, 更详细的请看<a href=\"http://jekyll.bootcss.com/\" target=\"_blank\" rel=\"external\">Jekyll中文文档</a>、<a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"external\">Jekyll英文文档</a>、<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"external\">Jekyll主题列表</a>。<br>在 <code>Jekyll</code> 上逛了一个星期的我又回到了 <code>Hexo</code> , 发现 目前 <code>Jekyll</code> 对主题和一些插件的支持相对 <code>Hexo</code> 来说, 没那么友好, 可能有一些其它的方法只是我没找到而已,关于 <code>Jekyll</code> 搭建博客就介绍到这, 如果有问题的话可以评论, 或者联系我。</p>\n<h3 id=\"使用Hexo解决上面前三个问题\"><a href=\"#使用Hexo解决上面前三个问题\" class=\"headerlink\" title=\"使用Hexo解决上面前三个问题\"></a>使用Hexo解决上面前三个问题</h3><p>是的, 我大<code>Hexo</code>同样可以解决上面三个问题, 那就是使用git。关于如何使用 <code>Hexo</code> 搭建博客请看我另一篇文章<a href=\"http://www.baixin.io/2015/08/25/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\">HEXO搭建个人博客</a>, 如果搭建的过程中出现了问题, 我们可以交流交流。现在我假设你已经能基本使用 <code>Hexo</code> 了, 接下来就看看如何来管理博客。</p>\n<h2 id=\"使用git管理博客\"><a href=\"#使用git管理博客\" class=\"headerlink\" title=\"使用git管理博客\"></a>使用git管理博客</h2><p><a href=\"https://github.com/leopardpan/Blog-Growing\" target=\"_blank\" rel=\"external\">Blog-Growing</a>是我管理博客的仓库地址。结构大致是:</p>\n<ul>\n<li>Blog-Growing<ul>\n<li>.git</li>\n<li>.gitignore</li>\n<li>Hexo<ul>\n<li>..</li>\n<li>..</li>\n<li>整个博客的配置信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>你可以把我的的<a href=\"https://github.com/leopardpan/Blog-Growing\" target=\"_blank\" rel=\"external\">Blog-Growing</a> clone下来, 看看一些基本配置是怎么配置的。需要提醒的是, <code>要把主题下的.git给删除掉</code> , 当然了你也可以使用 <code>git submodule</code> 来管理, 具体的管理方法我这里就不做多的介绍了, 想了解的话可以私信我。<br>上面的过程基本做完后, 怎么来解决我开篇提的前三个问题了。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现:\"></a>具体实现:</h3><p><strong>一：家里电脑使用博客</strong><br>建立git远端仓库管理博客,并使用家里的电脑把本地博客的配置推送到远端仓库。<br><strong>二：公司电脑使用博客</strong><br>到了公司只需要执行<code>sudo npm install -g hexo</code>,然后cd到你的博客目录下,如我cd 到Hexo目录下, 然后执行 <code>hexo server</code> 就可以在本地预览博客了。<br><strong>三：使用Git保存</strong><br>修改好博客后记得先使用git来提交下, 即使下次把博客的样式修改坏了, 也可以使用 <code>git reset --hard</code> 来回退。如: 我cd 到 <code>Blog-Growing</code> 目录下使用git提交。<br><strong>四：博客提交</strong><br>1、修改好的博客使用 <code>hexo d</code> 展示到博客页上。<br>2、git push 整个本地博客。</p>\n<p><strong>提示:</strong> 在这里 <code>git</code> 仅仅只是用户做博客的版本管理的, 博客的样式修改、基本部署还是使用 <code>hexo</code> 来操作的。</p>\n<h2 id=\"让百度能搜索到你的博客\"><a href=\"#让百度能搜索到你的博客\" class=\"headerlink\" title=\"让百度能搜索到你的博客\"></a>让百度能搜索到你的博客</h2><h3 id=\"为什么要使用百度搜索？\"><a href=\"#为什么要使用百度搜索？\" class=\"headerlink\" title=\"为什么要使用百度搜索？\"></a>为什么要使用百度搜索？</h3><p>有人可能会说作为一个开发人员, 你不会用 <code>Google</code> 啊。 是的, Google是能搜到我们搭建在 <code>Github Page</code> 的博客, 会用<code>Google</code> 也是一个开发人员必备技能之一。但是, 我们生活在天朝, 所以百度还是总有会用到的时候, 或者是你想让更多的天朝人能搜到你。</p>\n<h3 id=\"为什么使用百度搜索不到-Github-Page-上的博客？\"><a href=\"#为什么使用百度搜索不到-Github-Page-上的博客？\" class=\"headerlink\" title=\"为什么使用百度搜索不到 Github Page 上的博客？\"></a>为什么使用百度搜索不到 <code>Github Page</code> 上的博客？</h3><p>有人联系过 <code>Github Support 部门</code> , 给出大致的意思就是: 百度爬虫爬得太猛烈，已经对很多 Github 用户造成了问题。所以 Github 将禁止百度爬虫的爬取。</p>\n<h3 id=\"如何让百度能搜索你的博客\"><a href=\"#如何让百度能搜索你的博客\" class=\"headerlink\" title=\"如何让百度能搜索你的博客?\"></a>如何让百度能搜索你的博客?</h3><p>根据上面说的, 目前发现只是Github Page禁止了百度搜索, 所以让百度能搜索到你的博客还是有一些方法的。例如:</p>\n<ul>\n<li>自己搞个VPS,博客部署在VPS上。</li>\n<li>博客部署 <code>Coding.net</code> 上, <code>GitCafe</code>已经合并到 <code>Coding</code> 。<br>我使用的是第二种方法, 博客部署在 <code>Coding.net</code> 上也相对简单些。<h4 id=\"在Coding上部署你的博客。\"><a href=\"#在Coding上部署你的博客。\" class=\"headerlink\" title=\"在Coding上部署你的博客。\"></a>在Coding上部署你的博客。</h4>Coding同样支持Hexo、Jekyll等博客的部署, Coding 跟Github还是挺像的,而且是中文。 同样的在Coding里面建一个项目,项目名字跟你的用户名一样,这里我就不啰嗦了, 说几个需要注意的地方:<br><strong>注意一:</strong><br>在<code>Coding Page</code> 上部署博客,需要把博客推送到<code>coding-pages</code> 分支上, 分支名字是固定的。<br><strong>注意二:</strong><br><code>Coding Page</code> 不支持自定义CNAME, 你需要点击到Page模块,然后添加一个域名来绑定。</li>\n</ul>\n<p>更详细的请看<a href=\"https://coding.net/help/doc/pages/index.html\" target=\"_blank\" rel=\"external\">Coding Pages 官网介绍</a>.</p>\n<p>参考文章:<br><a href=\"http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/\" target=\"_blank\" rel=\"external\">解决 Github Pages 禁止百度爬虫的方法与可行性分析</a></p>\n","excerpt":"<p><img src=\"/img/HEXO1.png\" alt=\"HEXO进阶\"></p>","more":"<h1 id=\"HEXO进阶\"><a href=\"#HEXO进阶\" class=\"headerlink\" title=\"HEXO进阶\"></a>HEXO进阶</h1><ul>\n<li>1、博客部署样式出问题了怎么办？</li>\n<li>2、电脑重装或者误删了本地博客怎么办？</li>\n<li>3、想使用两台电脑写博客怎么办？</li>\n<li>4、为何使用百度搜不到我的博客？</li>\n</ul>\n<p>最近有好多朋友问我类似的问题, 同样也是我想解决的问题, 下面我会一个一个的介绍怎么解决上面的几个问题。</p>\n<h3 id=\"使用Jekyll解决前三个问题。\"><a href=\"#使用Jekyll解决前三个问题。\" class=\"headerlink\" title=\"使用Jekyll解决前三个问题。\"></a>使用Jekyll解决前三个问题。</h3><p>不得不说 <code>Jekyll</code> 确实可以解决我上面三个问题, 因为 <code>Jekyll</code> 是直接把Markdown格式的文章直接放在github仓库里的, 相当于直接用git来管理博客了, <code>Github</code> 官方也很推荐 <code>Jekyll</code> 。 你可以先看下 <code>Jekyll</code> 搭建博客的<a href=\"voyagelab.github.io\">voyagelab</a>, <a href=\"https://github.com/voyagelab/voyagelab.github.io\">github地址</a>, 当然了这只是很普通的, Jekyll 也有很多主题可以选择的, 更详细的请看<a href=\"http://jekyll.bootcss.com/\">Jekyll中文文档</a>、<a href=\"https://jekyllrb.com/\">Jekyll英文文档</a>、<a href=\"http://jekyllthemes.org/\">Jekyll主题列表</a>。<br>在 <code>Jekyll</code> 上逛了一个星期的我又回到了 <code>Hexo</code> , 发现 目前 <code>Jekyll</code> 对主题和一些插件的支持相对 <code>Hexo</code> 来说, 没那么友好, 可能有一些其它的方法只是我没找到而已,关于 <code>Jekyll</code> 搭建博客就介绍到这, 如果有问题的话可以评论, 或者联系我。</p>\n<h3 id=\"使用Hexo解决上面前三个问题\"><a href=\"#使用Hexo解决上面前三个问题\" class=\"headerlink\" title=\"使用Hexo解决上面前三个问题\"></a>使用Hexo解决上面前三个问题</h3><p>是的, 我大<code>Hexo</code>同样可以解决上面三个问题, 那就是使用git。关于如何使用 <code>Hexo</code> 搭建博客请看我另一篇文章<a href=\"http://www.baixin.io/2015/08/25/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\">HEXO搭建个人博客</a>, 如果搭建的过程中出现了问题, 我们可以交流交流。现在我假设你已经能基本使用 <code>Hexo</code> 了, 接下来就看看如何来管理博客。</p>\n<h2 id=\"使用git管理博客\"><a href=\"#使用git管理博客\" class=\"headerlink\" title=\"使用git管理博客\"></a>使用git管理博客</h2><p><a href=\"https://github.com/leopardpan/Blog-Growing\">Blog-Growing</a>是我管理博客的仓库地址。结构大致是:</p>\n<ul>\n<li>Blog-Growing<ul>\n<li>.git</li>\n<li>.gitignore</li>\n<li>Hexo<ul>\n<li>..</li>\n<li>..</li>\n<li>整个博客的配置信息</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>你可以把我的的<a href=\"https://github.com/leopardpan/Blog-Growing\">Blog-Growing</a> clone下来, 看看一些基本配置是怎么配置的。需要提醒的是, <code>要把主题下的.git给删除掉</code> , 当然了你也可以使用 <code>git submodule</code> 来管理, 具体的管理方法我这里就不做多的介绍了, 想了解的话可以私信我。<br>上面的过程基本做完后, 怎么来解决我开篇提的前三个问题了。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现:\"></a>具体实现:</h3><p><strong>一：家里电脑使用博客</strong><br>建立git远端仓库管理博客,并使用家里的电脑把本地博客的配置推送到远端仓库。<br><strong>二：公司电脑使用博客</strong><br>到了公司只需要执行<code>sudo npm install -g hexo</code>,然后cd到你的博客目录下,如我cd 到Hexo目录下, 然后执行 <code>hexo server</code> 就可以在本地预览博客了。<br><strong>三：使用Git保存</strong><br>修改好博客后记得先使用git来提交下, 即使下次把博客的样式修改坏了, 也可以使用 <code>git reset --hard</code> 来回退。如: 我cd 到 <code>Blog-Growing</code> 目录下使用git提交。<br><strong>四：博客提交</strong><br>1、修改好的博客使用 <code>hexo d</code> 展示到博客页上。<br>2、git push 整个本地博客。</p>\n<p><strong>提示:</strong> 在这里 <code>git</code> 仅仅只是用户做博客的版本管理的, 博客的样式修改、基本部署还是使用 <code>hexo</code> 来操作的。</p>\n<h2 id=\"让百度能搜索到你的博客\"><a href=\"#让百度能搜索到你的博客\" class=\"headerlink\" title=\"让百度能搜索到你的博客\"></a>让百度能搜索到你的博客</h2><h3 id=\"为什么要使用百度搜索？\"><a href=\"#为什么要使用百度搜索？\" class=\"headerlink\" title=\"为什么要使用百度搜索？\"></a>为什么要使用百度搜索？</h3><p>有人可能会说作为一个开发人员, 你不会用 <code>Google</code> 啊。 是的, Google是能搜到我们搭建在 <code>Github Page</code> 的博客, 会用<code>Google</code> 也是一个开发人员必备技能之一。但是, 我们生活在天朝, 所以百度还是总有会用到的时候, 或者是你想让更多的天朝人能搜到你。</p>\n<h3 id=\"为什么使用百度搜索不到-Github-Page-上的博客？\"><a href=\"#为什么使用百度搜索不到-Github-Page-上的博客？\" class=\"headerlink\" title=\"为什么使用百度搜索不到 Github Page 上的博客？\"></a>为什么使用百度搜索不到 <code>Github Page</code> 上的博客？</h3><p>有人联系过 <code>Github Support 部门</code> , 给出大致的意思就是: 百度爬虫爬得太猛烈，已经对很多 Github 用户造成了问题。所以 Github 将禁止百度爬虫的爬取。</p>\n<h3 id=\"如何让百度能搜索你的博客\"><a href=\"#如何让百度能搜索你的博客\" class=\"headerlink\" title=\"如何让百度能搜索你的博客?\"></a>如何让百度能搜索你的博客?</h3><p>根据上面说的, 目前发现只是Github Page禁止了百度搜索, 所以让百度能搜索到你的博客还是有一些方法的。例如:</p>\n<ul>\n<li>自己搞个VPS,博客部署在VPS上。</li>\n<li>博客部署 <code>Coding.net</code> 上, <code>GitCafe</code>已经合并到 <code>Coding</code> 。<br>我使用的是第二种方法, 博客部署在 <code>Coding.net</code> 上也相对简单些。<h4 id=\"在Coding上部署你的博客。\"><a href=\"#在Coding上部署你的博客。\" class=\"headerlink\" title=\"在Coding上部署你的博客。\"></a>在Coding上部署你的博客。</h4>Coding同样支持Hexo、Jekyll等博客的部署, Coding 跟Github还是挺像的,而且是中文。 同样的在Coding里面建一个项目,项目名字跟你的用户名一样,这里我就不啰嗦了, 说几个需要注意的地方:<br><strong>注意一:</strong><br>在<code>Coding Page</code> 上部署博客,需要把博客推送到<code>coding-pages</code> 分支上, 分支名字是固定的。<br><strong>注意二:</strong><br><code>Coding Page</code> 不支持自定义CNAME, 你需要点击到Page模块,然后添加一个域名来绑定。</li>\n</ul>\n<p>更详细的请看<a href=\"https://coding.net/help/doc/pages/index.html\">Coding Pages 官网介绍</a>.</p>\n<p>参考文章:<br><a href=\"http://jerryzou.com/posts/feasibility-of-allowing-baiduSpider-for-Github-Pages/\">解决 Github Pages 禁止百度爬虫的方法与可行性分析</a></p>"},{"layout":"post","title":"iBeacon 能为开发者做什么？","date":"2016-04-06T18:25:06.000Z","description":"","_content":"\n![ibeacon](/img/iBeacon.png)\n<!--more-->\n\n## 简介：  \n\n* iOS7后苹果出的一项新技术，支持蓝牙4.0(或以上)的iOS设备，工作方式是低功耗蓝牙（BLE），一个 `iBeacon` 硬件设备在不做任何处理的情况下一般可使用两三年左右。\n* 可实现地理围栏、室内定位等功能，测量距离：[iBeacon](https://developer.apple.com/ibeacon/) 通过设备的 `UUID` 可以检测到具体的 `iBeacon` 信息，如：`Major` ，`Minor` ，用来进行多个 `iBeacon` 区分，`RSSI` ，用来计算信号接受者到 `iBeacon` 信号发射硬件之间的距离。`identifier` : 用来区分某一块的 `iBeacon` 信号，`iBeacon` 信号接受者自定义。iBeacon信号会因为人或物而遮挡信息强度，影响iBeacon信号接收。\n   \n#### **iBeacon功能 对开发者使用的额外成本:**\n* `iBeacon` 也属于一种定位功能，所以需要添加 `CoreLocation.framework` 。\n* `App` 开发者需要开启定位功能需要配置：在 `Xcode` 的 `info.plist` 里面添加 `NSLocationAlwaysUsageDescription` 或 `NSLocationWhenInUseUsageDescription` 字段。（iOS7后该添加了该字段应用才会弹出 `是否允许应用访问用户的位置信息）。\n\n\n#### **检测iBeacon信号对用户设备的必要条件：**\n* 用户设备iOS7或更新操作系统。\n* 用户蓝牙设备4.0或更新。\n* 用户蓝牙设备必须开启。\n* 用户设备定位服务必须开启，允许应用访问位置信息。\n\n#### iBeacon 可以激活 App ：\n* 条件：这个 `App` 能后台访问位置信息，并且具备上述功能(能正常检查iBeacon)。\n* 现象：这个 `App` 即使没有启动(无进程), 当有被监测iBeacon信号出现时, 这个 `App` 能被唤醒, 没任何操作的情况下, 进程存活时间可长达几个小时。\n* 影响：开发者对用户使用App的使用时长统计可能会出现失误, 这时开发者就需要借助第三方统计SDK了,例如： `TalkingData` SDK 等。\n\n\n#### iBeacon功能对用户造成的影响:\n* iBeacon如果在后台监测到信号时, 当屏幕处于锁频状态, 设备左下角会有这个 App 的icon, 对于这一现象具体怎么使用就要看开发者了。\n \n","source":"_posts/iBeacon.md","raw":"---\nlayout: post\ntitle: \"iBeacon 能为开发者做什么？\"\ndate: 2016-04-06 11:25:06 -0700\ndescription: \"\"\ncategory: 技术分享\n---\n\n![ibeacon](/img/iBeacon.png)\n<!--more-->\n\n## 简介：  \n\n* iOS7后苹果出的一项新技术，支持蓝牙4.0(或以上)的iOS设备，工作方式是低功耗蓝牙（BLE），一个 `iBeacon` 硬件设备在不做任何处理的情况下一般可使用两三年左右。\n* 可实现地理围栏、室内定位等功能，测量距离：[iBeacon](https://developer.apple.com/ibeacon/) 通过设备的 `UUID` 可以检测到具体的 `iBeacon` 信息，如：`Major` ，`Minor` ，用来进行多个 `iBeacon` 区分，`RSSI` ，用来计算信号接受者到 `iBeacon` 信号发射硬件之间的距离。`identifier` : 用来区分某一块的 `iBeacon` 信号，`iBeacon` 信号接受者自定义。iBeacon信号会因为人或物而遮挡信息强度，影响iBeacon信号接收。\n   \n#### **iBeacon功能 对开发者使用的额外成本:**\n* `iBeacon` 也属于一种定位功能，所以需要添加 `CoreLocation.framework` 。\n* `App` 开发者需要开启定位功能需要配置：在 `Xcode` 的 `info.plist` 里面添加 `NSLocationAlwaysUsageDescription` 或 `NSLocationWhenInUseUsageDescription` 字段。（iOS7后该添加了该字段应用才会弹出 `是否允许应用访问用户的位置信息）。\n\n\n#### **检测iBeacon信号对用户设备的必要条件：**\n* 用户设备iOS7或更新操作系统。\n* 用户蓝牙设备4.0或更新。\n* 用户蓝牙设备必须开启。\n* 用户设备定位服务必须开启，允许应用访问位置信息。\n\n#### iBeacon 可以激活 App ：\n* 条件：这个 `App` 能后台访问位置信息，并且具备上述功能(能正常检查iBeacon)。\n* 现象：这个 `App` 即使没有启动(无进程), 当有被监测iBeacon信号出现时, 这个 `App` 能被唤醒, 没任何操作的情况下, 进程存活时间可长达几个小时。\n* 影响：开发者对用户使用App的使用时长统计可能会出现失误, 这时开发者就需要借助第三方统计SDK了,例如： `TalkingData` SDK 等。\n\n\n#### iBeacon功能对用户造成的影响:\n* iBeacon如果在后台监测到信号时, 当屏幕处于锁频状态, 设备左下角会有这个 App 的icon, 对于这一现象具体怎么使用就要看开发者了。\n \n","slug":"iBeacon","published":1,"updated":"2016-04-26T01:52:56.000Z","comments":1,"photos":[],"link":"","_id":"cini7ici20004kofypdpqvtyv","content":"<p><img src=\"/img/iBeacon.png\" alt=\"ibeacon\"><br><a id=\"more\"></a></p>\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><ul>\n<li>iOS7后苹果出的一项新技术，支持蓝牙4.0(或以上)的iOS设备，工作方式是低功耗蓝牙（BLE），一个 <code>iBeacon</code> 硬件设备在不做任何处理的情况下一般可使用两三年左右。</li>\n<li>可实现地理围栏、室内定位等功能，测量距离：<a href=\"https://developer.apple.com/ibeacon/\" target=\"_blank\" rel=\"external\">iBeacon</a> 通过设备的 <code>UUID</code> 可以检测到具体的 <code>iBeacon</code> 信息，如：<code>Major</code> ，<code>Minor</code> ，用来进行多个 <code>iBeacon</code> 区分，<code>RSSI</code> ，用来计算信号接受者到 <code>iBeacon</code> 信号发射硬件之间的距离。<code>identifier</code> : 用来区分某一块的 <code>iBeacon</code> 信号，<code>iBeacon</code> 信号接受者自定义。iBeacon信号会因为人或物而遮挡信息强度，影响iBeacon信号接收。</li>\n</ul>\n<h4 id=\"iBeacon功能-对开发者使用的额外成本\"><a href=\"#iBeacon功能-对开发者使用的额外成本\" class=\"headerlink\" title=\"iBeacon功能 对开发者使用的额外成本:\"></a><strong>iBeacon功能 对开发者使用的额外成本:</strong></h4><ul>\n<li><code>iBeacon</code> 也属于一种定位功能，所以需要添加 <code>CoreLocation.framework</code> 。</li>\n<li><code>App</code> 开发者需要开启定位功能需要配置：在 <code>Xcode</code> 的 <code>info.plist</code> 里面添加 <code>NSLocationAlwaysUsageDescription</code> 或 <code>NSLocationWhenInUseUsageDescription</code> 字段。（iOS7后该添加了该字段应用才会弹出 `是否允许应用访问用户的位置信息）。</li>\n</ul>\n<h4 id=\"检测iBeacon信号对用户设备的必要条件：\"><a href=\"#检测iBeacon信号对用户设备的必要条件：\" class=\"headerlink\" title=\"检测iBeacon信号对用户设备的必要条件：\"></a><strong>检测iBeacon信号对用户设备的必要条件：</strong></h4><ul>\n<li>用户设备iOS7或更新操作系统。</li>\n<li>用户蓝牙设备4.0或更新。</li>\n<li>用户蓝牙设备必须开启。</li>\n<li>用户设备定位服务必须开启，允许应用访问位置信息。</li>\n</ul>\n<h4 id=\"iBeacon-可以激活-App-：\"><a href=\"#iBeacon-可以激活-App-：\" class=\"headerlink\" title=\"iBeacon 可以激活 App ：\"></a>iBeacon 可以激活 App ：</h4><ul>\n<li>条件：这个 <code>App</code> 能后台访问位置信息，并且具备上述功能(能正常检查iBeacon)。</li>\n<li>现象：这个 <code>App</code> 即使没有启动(无进程), 当有被监测iBeacon信号出现时, 这个 <code>App</code> 能被唤醒, 没任何操作的情况下, 进程存活时间可长达几个小时。</li>\n<li>影响：开发者对用户使用App的使用时长统计可能会出现失误, 这时开发者就需要借助第三方统计SDK了,例如： <code>TalkingData</code> SDK 等。</li>\n</ul>\n<h4 id=\"iBeacon功能对用户造成的影响\"><a href=\"#iBeacon功能对用户造成的影响\" class=\"headerlink\" title=\"iBeacon功能对用户造成的影响:\"></a>iBeacon功能对用户造成的影响:</h4><ul>\n<li>iBeacon如果在后台监测到信号时, 当屏幕处于锁频状态, 设备左下角会有这个 App 的icon, 对于这一现象具体怎么使用就要看开发者了。</li>\n</ul>\n","excerpt":"<p><img src=\"/img/iBeacon.png\" alt=\"ibeacon\"><br>","more":"</p>\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><ul>\n<li>iOS7后苹果出的一项新技术，支持蓝牙4.0(或以上)的iOS设备，工作方式是低功耗蓝牙（BLE），一个 <code>iBeacon</code> 硬件设备在不做任何处理的情况下一般可使用两三年左右。</li>\n<li>可实现地理围栏、室内定位等功能，测量距离：<a href=\"https://developer.apple.com/ibeacon/\">iBeacon</a> 通过设备的 <code>UUID</code> 可以检测到具体的 <code>iBeacon</code> 信息，如：<code>Major</code> ，<code>Minor</code> ，用来进行多个 <code>iBeacon</code> 区分，<code>RSSI</code> ，用来计算信号接受者到 <code>iBeacon</code> 信号发射硬件之间的距离。<code>identifier</code> : 用来区分某一块的 <code>iBeacon</code> 信号，<code>iBeacon</code> 信号接受者自定义。iBeacon信号会因为人或物而遮挡信息强度，影响iBeacon信号接收。</li>\n</ul>\n<h4 id=\"iBeacon功能-对开发者使用的额外成本\"><a href=\"#iBeacon功能-对开发者使用的额外成本\" class=\"headerlink\" title=\"iBeacon功能 对开发者使用的额外成本:\"></a><strong>iBeacon功能 对开发者使用的额外成本:</strong></h4><ul>\n<li><code>iBeacon</code> 也属于一种定位功能，所以需要添加 <code>CoreLocation.framework</code> 。</li>\n<li><code>App</code> 开发者需要开启定位功能需要配置：在 <code>Xcode</code> 的 <code>info.plist</code> 里面添加 <code>NSLocationAlwaysUsageDescription</code> 或 <code>NSLocationWhenInUseUsageDescription</code> 字段。（iOS7后该添加了该字段应用才会弹出 `是否允许应用访问用户的位置信息）。</li>\n</ul>\n<h4 id=\"检测iBeacon信号对用户设备的必要条件：\"><a href=\"#检测iBeacon信号对用户设备的必要条件：\" class=\"headerlink\" title=\"检测iBeacon信号对用户设备的必要条件：\"></a><strong>检测iBeacon信号对用户设备的必要条件：</strong></h4><ul>\n<li>用户设备iOS7或更新操作系统。</li>\n<li>用户蓝牙设备4.0或更新。</li>\n<li>用户蓝牙设备必须开启。</li>\n<li>用户设备定位服务必须开启，允许应用访问位置信息。</li>\n</ul>\n<h4 id=\"iBeacon-可以激活-App-：\"><a href=\"#iBeacon-可以激活-App-：\" class=\"headerlink\" title=\"iBeacon 可以激活 App ：\"></a>iBeacon 可以激活 App ：</h4><ul>\n<li>条件：这个 <code>App</code> 能后台访问位置信息，并且具备上述功能(能正常检查iBeacon)。</li>\n<li>现象：这个 <code>App</code> 即使没有启动(无进程), 当有被监测iBeacon信号出现时, 这个 <code>App</code> 能被唤醒, 没任何操作的情况下, 进程存活时间可长达几个小时。</li>\n<li>影响：开发者对用户使用App的使用时长统计可能会出现失误, 这时开发者就需要借助第三方统计SDK了,例如： <code>TalkingData</code> SDK 等。</li>\n</ul>\n<h4 id=\"iBeacon功能对用户造成的影响\"><a href=\"#iBeacon功能对用户造成的影响\" class=\"headerlink\" title=\"iBeacon功能对用户造成的影响:\"></a>iBeacon功能对用户造成的影响:</h4><ul>\n<li>iBeacon如果在后台监测到信号时, 当屏幕处于锁频状态, 设备左下角会有这个 App 的icon, 对于这一现象具体怎么使用就要看开发者了。</li>\n</ul>"},{"layout":"post","title":"iOS动态更新","date":"2016-01-09T03:15:06.000Z","description":"iOS 使用Runtime 实现动态更新","_content":"\n![iOS-OTA](/img/iOSOTA.png)\n\n<!--more-->\n\n\n* 1、控件到 `window` 的层级关系:   \n* 2、分析控件的详细路径:\n* 3、动态修改控件:      \n* 4、工具篇:\n\n\n### 视图的层级关系\n\n每个 `App` , 至少有一个根 `Window` , 通常情况下我们只用一个 。`window` 有一个 `rootViewController` , 这就是我们所谓的根视图 , 我们所有的控制器都是放在 `rootViewController` 里面的。\n\n![Dynamic-image1.jpeg][1]\n\n这个是最简单的层级关系\n\n如果在项目里有了这么一个路径 , 我们可以做什么呢？   \n\n* 在当项目很复杂 , 可以其它地方可以直接修改这个控件的状态\n* 当某个控件命名存在却又没有显示出来 , 可以通过路径来辅助查找\n* 由服务器下发一些配置 , 使用 `Runtime` 去动态的修改已上线的项目\n\n下面将介绍如何使用代码来找出这些视图(控件)的路径\n\n### 分析控件的详细路径\n\n#### 1、找出根 `Window` :  \n \n每一个视图、控件 , 他们最终的根都是main函数返回的 `application` , 通过 `[UIApplication sharedApplication]` 可以得到 。 `application` 的 `windows` 属性是一个数组 , 这里面装的是这个应用的所有 `Window` , 我们通常用的是第一个也就是 `application.windows[0]`    \n\n#### 2、遍历视图 : \n\n得到了 `window` 对象一切都好办了 。 然后拿到 `window` 的 `rootViewController` , 在获取 `rootViewController` 里面所有的 `childViewControllers` 和 `view` 里的 `subviews` , 一直递归下去就可以得到当前屏幕里所有视图对象了 , 同时可以通过 `runtime` 把它们的 `property`、`delegate` 都获取出来。  \n \n结合 `Reveal` 或者 `Xcode` 自带的 `Captuer View Hiearachy` , 我们可以推测一下这两个的的实现原理了 :  \n\n1、根据应用得到根视图    \n2、递归获取里面的所有控件   \n3、按照他们的层级关系一层一层的画出来\n\n### 动态修改控件\n\n1、把上面获取到的所有控件的详细信息上传到服务器 。   \n2、根据业务需求由服务器给我们下发对应的配置列表，以 `button` 为例 : 配置列表里必须要有 :    \n> 1)、`button` 的全路径 : 如 `UIWindow` -> `UIWindow` -> `UIView` -> `UIView` -> `UILayoutContainerView` -> `UITabBar` -> `UIView` —> `UIButton`    \n> 2)、`button` 的唯一标识 : 如 `tag` 值或自己实现的一套算法生成的唯一标识 , 目的是防止与 `button` 同一层次的视图搞混 。  \n> 3)、 根据路径及唯一标识来匹配 `App` 里的控件 , 匹配和上面的查找原理是相通的。   \n> 4)、 匹配成功代表  `button` 确实存在 , 根据业务需求做后续操作 。   \n> 提示: 匹配策略尽可能的多 , 防止意外情况某一两个标识生成失败或者生成相同 。\n\n3、修改 `button` 的状态。\n> 1)、 如某个按钮点了会 `Crash` 或暂时不需要被点击 , 但是又要展示出来 , 可以直接修改 `button` 的 `enabled` 属性 。   \n> 2)、 如某业务暂时关闭 , 可以直接修改入口 `按钮` frame为0 , 前提是要自动布局已做好 。    \n> 3)、 如给购买 `按钮` 添加监听事件 `addTarget: action: forControlEvents:`     \n> `target` 也可以通过上面 `遍历视图` 获取到 , `action` 可以由服务器下发 , 也可以一开始就写死 , 等有需求的时候直接传不同的参数就行了 。  \n\n4、 绑定查找控件时 , 这个界面必须要已经初始化完成了才行 , 假如界面还没生成肯定是查找不到这个控件的 。 这里给大家提供两种思路 : \n>1、使用Runtime `Method Swizzing` ,  直接把修改控件的方法与 `didMoveToSuperview` 和 `didMoveToWindow` 动态绑定 , 等这个控件加载出来之后再去修改 , 查找路径正确的话肯定就能找到了 。   \n>2、在具体的类里面 , 等控件的初始化方法调用完后 , 再去执行动态修改 , 如在`viewDidLoad` 里面初始化控件 , 在 `viewWillAppear:` 里面动态修改 。  \n> 建议使用第一种适用范围更强 。\n\n\n上架后的 `应用` 可能会遇到的一些突发状况 , 未测出的`Crash`、临时改点小需求 , 等等 , 我们总不能每次因为一点小改动就重新提交一次 `App Store` , 先不说 `App Store` 的审核时间 , 频繁的让用户去更新应用 , 用户也会烦的 。使用这篇文章所讲的来实现动态更新是再合适不过了 。   \n\n首先上面讲的 `动态更新` 是完全脱离出来的一个模块 , 跟业务逻辑没有任何关系 , 只需要部署一次就行了 , 等开发下一个项目也可以直接拿过去使用 。这里的动态更新适用于局部的视图、控件的修改 , 如果你有其它需求可以考虑 [JSPatch](https://github.com/bang590/JSPatch) , 下发脚本也是一个不错的选择 。\n\n\n### 工具篇\n使用一些UI调试的辅助工具 , 使我们查看视图在项目中得层次结构更为方便 。        \n常用的UI调试的工具：\n\n* Captuer View Hiearachy\n* Reveal\n\nXcode自带的 `Captuer View Hiearachy` 实现步骤:  \n\n* 1、打开Xcode , 运行项目 , 选择最顶部的 `Debug`\n* 2、`Debug` -> `View Debugging` -> `Show View Frames`\n* 3、`Debug` -> `View Debugging` -> `Captuer View Hiearachy`\n\nXcode里面就变成了三维的视图了 , Xcode左侧展示出来的是层级关系的树状图 。\n\nReveal的功能相对来说更强大 , 适用于UI调试视图查找 。使用方法请看 [Reveal集成指南](http://support.revealapp.com/kb/getting-started/reveal) 。\n\n\n  [1]: /img/bVqwV3","source":"_posts/iOS动态更新.md","raw":"---\nlayout: post\ntitle: \"iOS动态更新\"\ndate: 2016-01-09 11:15:06 \ndescription: \"iOS 使用Runtime 实现动态更新\"\ncategory: iOS\n\n---\n\n![iOS-OTA](/img/iOSOTA.png)\n\n<!--more-->\n\n\n* 1、控件到 `window` 的层级关系:   \n* 2、分析控件的详细路径:\n* 3、动态修改控件:      \n* 4、工具篇:\n\n\n### 视图的层级关系\n\n每个 `App` , 至少有一个根 `Window` , 通常情况下我们只用一个 。`window` 有一个 `rootViewController` , 这就是我们所谓的根视图 , 我们所有的控制器都是放在 `rootViewController` 里面的。\n\n![Dynamic-image1.jpeg][1]\n\n这个是最简单的层级关系\n\n如果在项目里有了这么一个路径 , 我们可以做什么呢？   \n\n* 在当项目很复杂 , 可以其它地方可以直接修改这个控件的状态\n* 当某个控件命名存在却又没有显示出来 , 可以通过路径来辅助查找\n* 由服务器下发一些配置 , 使用 `Runtime` 去动态的修改已上线的项目\n\n下面将介绍如何使用代码来找出这些视图(控件)的路径\n\n### 分析控件的详细路径\n\n#### 1、找出根 `Window` :  \n \n每一个视图、控件 , 他们最终的根都是main函数返回的 `application` , 通过 `[UIApplication sharedApplication]` 可以得到 。 `application` 的 `windows` 属性是一个数组 , 这里面装的是这个应用的所有 `Window` , 我们通常用的是第一个也就是 `application.windows[0]`    \n\n#### 2、遍历视图 : \n\n得到了 `window` 对象一切都好办了 。 然后拿到 `window` 的 `rootViewController` , 在获取 `rootViewController` 里面所有的 `childViewControllers` 和 `view` 里的 `subviews` , 一直递归下去就可以得到当前屏幕里所有视图对象了 , 同时可以通过 `runtime` 把它们的 `property`、`delegate` 都获取出来。  \n \n结合 `Reveal` 或者 `Xcode` 自带的 `Captuer View Hiearachy` , 我们可以推测一下这两个的的实现原理了 :  \n\n1、根据应用得到根视图    \n2、递归获取里面的所有控件   \n3、按照他们的层级关系一层一层的画出来\n\n### 动态修改控件\n\n1、把上面获取到的所有控件的详细信息上传到服务器 。   \n2、根据业务需求由服务器给我们下发对应的配置列表，以 `button` 为例 : 配置列表里必须要有 :    \n> 1)、`button` 的全路径 : 如 `UIWindow` -> `UIWindow` -> `UIView` -> `UIView` -> `UILayoutContainerView` -> `UITabBar` -> `UIView` —> `UIButton`    \n> 2)、`button` 的唯一标识 : 如 `tag` 值或自己实现的一套算法生成的唯一标识 , 目的是防止与 `button` 同一层次的视图搞混 。  \n> 3)、 根据路径及唯一标识来匹配 `App` 里的控件 , 匹配和上面的查找原理是相通的。   \n> 4)、 匹配成功代表  `button` 确实存在 , 根据业务需求做后续操作 。   \n> 提示: 匹配策略尽可能的多 , 防止意外情况某一两个标识生成失败或者生成相同 。\n\n3、修改 `button` 的状态。\n> 1)、 如某个按钮点了会 `Crash` 或暂时不需要被点击 , 但是又要展示出来 , 可以直接修改 `button` 的 `enabled` 属性 。   \n> 2)、 如某业务暂时关闭 , 可以直接修改入口 `按钮` frame为0 , 前提是要自动布局已做好 。    \n> 3)、 如给购买 `按钮` 添加监听事件 `addTarget: action: forControlEvents:`     \n> `target` 也可以通过上面 `遍历视图` 获取到 , `action` 可以由服务器下发 , 也可以一开始就写死 , 等有需求的时候直接传不同的参数就行了 。  \n\n4、 绑定查找控件时 , 这个界面必须要已经初始化完成了才行 , 假如界面还没生成肯定是查找不到这个控件的 。 这里给大家提供两种思路 : \n>1、使用Runtime `Method Swizzing` ,  直接把修改控件的方法与 `didMoveToSuperview` 和 `didMoveToWindow` 动态绑定 , 等这个控件加载出来之后再去修改 , 查找路径正确的话肯定就能找到了 。   \n>2、在具体的类里面 , 等控件的初始化方法调用完后 , 再去执行动态修改 , 如在`viewDidLoad` 里面初始化控件 , 在 `viewWillAppear:` 里面动态修改 。  \n> 建议使用第一种适用范围更强 。\n\n\n上架后的 `应用` 可能会遇到的一些突发状况 , 未测出的`Crash`、临时改点小需求 , 等等 , 我们总不能每次因为一点小改动就重新提交一次 `App Store` , 先不说 `App Store` 的审核时间 , 频繁的让用户去更新应用 , 用户也会烦的 。使用这篇文章所讲的来实现动态更新是再合适不过了 。   \n\n首先上面讲的 `动态更新` 是完全脱离出来的一个模块 , 跟业务逻辑没有任何关系 , 只需要部署一次就行了 , 等开发下一个项目也可以直接拿过去使用 。这里的动态更新适用于局部的视图、控件的修改 , 如果你有其它需求可以考虑 [JSPatch](https://github.com/bang590/JSPatch) , 下发脚本也是一个不错的选择 。\n\n\n### 工具篇\n使用一些UI调试的辅助工具 , 使我们查看视图在项目中得层次结构更为方便 。        \n常用的UI调试的工具：\n\n* Captuer View Hiearachy\n* Reveal\n\nXcode自带的 `Captuer View Hiearachy` 实现步骤:  \n\n* 1、打开Xcode , 运行项目 , 选择最顶部的 `Debug`\n* 2、`Debug` -> `View Debugging` -> `Show View Frames`\n* 3、`Debug` -> `View Debugging` -> `Captuer View Hiearachy`\n\nXcode里面就变成了三维的视图了 , Xcode左侧展示出来的是层级关系的树状图 。\n\nReveal的功能相对来说更强大 , 适用于UI调试视图查找 。使用方法请看 [Reveal集成指南](http://support.revealapp.com/kb/getting-started/reveal) 。\n\n\n  [1]: /img/bVqwV3","slug":"iOS动态更新","published":1,"updated":"2016-04-26T01:52:56.000Z","comments":1,"photos":[],"link":"","_id":"cini7ici30005kofyrcyvmjib","content":"<p><img src=\"/img/iOSOTA.png\" alt=\"iOS-OTA\"></p>\n<a id=\"more\"></a>\n<ul>\n<li>1、控件到 <code>window</code> 的层级关系:   </li>\n<li>2、分析控件的详细路径:</li>\n<li>3、动态修改控件:      </li>\n<li>4、工具篇:</li>\n</ul>\n<h3 id=\"视图的层级关系\"><a href=\"#视图的层级关系\" class=\"headerlink\" title=\"视图的层级关系\"></a>视图的层级关系</h3><p>每个 <code>App</code> , 至少有一个根 <code>Window</code> , 通常情况下我们只用一个 。<code>window</code> 有一个 <code>rootViewController</code> , 这就是我们所谓的根视图 , 我们所有的控制器都是放在 <code>rootViewController</code> 里面的。</p>\n<p><img src=\"/img/bVqwV3\" alt=\"Dynamic-image1.jpeg\"></p>\n<p>这个是最简单的层级关系</p>\n<p>如果在项目里有了这么一个路径 , 我们可以做什么呢？   </p>\n<ul>\n<li>在当项目很复杂 , 可以其它地方可以直接修改这个控件的状态</li>\n<li>当某个控件命名存在却又没有显示出来 , 可以通过路径来辅助查找</li>\n<li>由服务器下发一些配置 , 使用 <code>Runtime</code> 去动态的修改已上线的项目</li>\n</ul>\n<p>下面将介绍如何使用代码来找出这些视图(控件)的路径</p>\n<h3 id=\"分析控件的详细路径\"><a href=\"#分析控件的详细路径\" class=\"headerlink\" title=\"分析控件的详细路径\"></a>分析控件的详细路径</h3><h4 id=\"1、找出根-Window\"><a href=\"#1、找出根-Window\" class=\"headerlink\" title=\"1、找出根 Window :\"></a>1、找出根 <code>Window</code> :</h4><p>每一个视图、控件 , 他们最终的根都是main函数返回的 <code>application</code> , 通过 <code>[UIApplication sharedApplication]</code> 可以得到 。 <code>application</code> 的 <code>windows</code> 属性是一个数组 , 这里面装的是这个应用的所有 <code>Window</code> , 我们通常用的是第一个也就是 <code>application.windows[0]</code>    </p>\n<h4 id=\"2、遍历视图\"><a href=\"#2、遍历视图\" class=\"headerlink\" title=\"2、遍历视图 :\"></a>2、遍历视图 :</h4><p>得到了 <code>window</code> 对象一切都好办了 。 然后拿到 <code>window</code> 的 <code>rootViewController</code> , 在获取 <code>rootViewController</code> 里面所有的 <code>childViewControllers</code> 和 <code>view</code> 里的 <code>subviews</code> , 一直递归下去就可以得到当前屏幕里所有视图对象了 , 同时可以通过 <code>runtime</code> 把它们的 <code>property</code>、<code>delegate</code> 都获取出来。  </p>\n<p>结合 <code>Reveal</code> 或者 <code>Xcode</code> 自带的 <code>Captuer View Hiearachy</code> , 我们可以推测一下这两个的的实现原理了 :  </p>\n<p>1、根据应用得到根视图<br>2、递归获取里面的所有控件<br>3、按照他们的层级关系一层一层的画出来</p>\n<h3 id=\"动态修改控件\"><a href=\"#动态修改控件\" class=\"headerlink\" title=\"动态修改控件\"></a>动态修改控件</h3><p>1、把上面获取到的所有控件的详细信息上传到服务器 。<br>2、根据业务需求由服务器给我们下发对应的配置列表，以 <code>button</code> 为例 : 配置列表里必须要有 :    </p>\n<blockquote>\n<p>1)、<code>button</code> 的全路径 : 如 <code>UIWindow</code> -&gt; <code>UIWindow</code> -&gt; <code>UIView</code> -&gt; <code>UIView</code> -&gt; <code>UILayoutContainerView</code> -&gt; <code>UITabBar</code> -&gt; <code>UIView</code> —&gt; <code>UIButton</code><br>2)、<code>button</code> 的唯一标识 : 如 <code>tag</code> 值或自己实现的一套算法生成的唯一标识 , 目的是防止与 <code>button</code> 同一层次的视图搞混 。<br>3)、 根据路径及唯一标识来匹配 <code>App</code> 里的控件 , 匹配和上面的查找原理是相通的。<br>4)、 匹配成功代表  <code>button</code> 确实存在 , 根据业务需求做后续操作 。<br>提示: 匹配策略尽可能的多 , 防止意外情况某一两个标识生成失败或者生成相同 。</p>\n</blockquote>\n<p>3、修改 <code>button</code> 的状态。</p>\n<blockquote>\n<p>1)、 如某个按钮点了会 <code>Crash</code> 或暂时不需要被点击 , 但是又要展示出来 , 可以直接修改 <code>button</code> 的 <code>enabled</code> 属性 。<br>2)、 如某业务暂时关闭 , 可以直接修改入口 <code>按钮</code> frame为0 , 前提是要自动布局已做好 。<br>3)、 如给购买 <code>按钮</code> 添加监听事件 <code>addTarget: action: forControlEvents:</code><br><code>target</code> 也可以通过上面 <code>遍历视图</code> 获取到 , <code>action</code> 可以由服务器下发 , 也可以一开始就写死 , 等有需求的时候直接传不同的参数就行了 。  </p>\n</blockquote>\n<p>4、 绑定查找控件时 , 这个界面必须要已经初始化完成了才行 , 假如界面还没生成肯定是查找不到这个控件的 。 这里给大家提供两种思路 : </p>\n<blockquote>\n<p>1、使用Runtime <code>Method Swizzing</code> ,  直接把修改控件的方法与 <code>didMoveToSuperview</code> 和 <code>didMoveToWindow</code> 动态绑定 , 等这个控件加载出来之后再去修改 , 查找路径正确的话肯定就能找到了 。<br>2、在具体的类里面 , 等控件的初始化方法调用完后 , 再去执行动态修改 , 如在<code>viewDidLoad</code> 里面初始化控件 , 在 <code>viewWillAppear:</code> 里面动态修改 。<br>建议使用第一种适用范围更强 。</p>\n</blockquote>\n<p>上架后的 <code>应用</code> 可能会遇到的一些突发状况 , 未测出的<code>Crash</code>、临时改点小需求 , 等等 , 我们总不能每次因为一点小改动就重新提交一次 <code>App Store</code> , 先不说 <code>App Store</code> 的审核时间 , 频繁的让用户去更新应用 , 用户也会烦的 。使用这篇文章所讲的来实现动态更新是再合适不过了 。   </p>\n<p>首先上面讲的 <code>动态更新</code> 是完全脱离出来的一个模块 , 跟业务逻辑没有任何关系 , 只需要部署一次就行了 , 等开发下一个项目也可以直接拿过去使用 。这里的动态更新适用于局部的视图、控件的修改 , 如果你有其它需求可以考虑 <a href=\"https://github.com/bang590/JSPatch\" target=\"_blank\" rel=\"external\">JSPatch</a> , 下发脚本也是一个不错的选择 。</p>\n<h3 id=\"工具篇\"><a href=\"#工具篇\" class=\"headerlink\" title=\"工具篇\"></a>工具篇</h3><p>使用一些UI调试的辅助工具 , 使我们查看视图在项目中得层次结构更为方便 。<br>常用的UI调试的工具：</p>\n<ul>\n<li>Captuer View Hiearachy</li>\n<li>Reveal</li>\n</ul>\n<p>Xcode自带的 <code>Captuer View Hiearachy</code> 实现步骤:  </p>\n<ul>\n<li>1、打开Xcode , 运行项目 , 选择最顶部的 <code>Debug</code></li>\n<li>2、<code>Debug</code> -&gt; <code>View Debugging</code> -&gt; <code>Show View Frames</code></li>\n<li>3、<code>Debug</code> -&gt; <code>View Debugging</code> -&gt; <code>Captuer View Hiearachy</code></li>\n</ul>\n<p>Xcode里面就变成了三维的视图了 , Xcode左侧展示出来的是层级关系的树状图 。</p>\n<p>Reveal的功能相对来说更强大 , 适用于UI调试视图查找 。使用方法请看 <a href=\"http://support.revealapp.com/kb/getting-started/reveal\" target=\"_blank\" rel=\"external\">Reveal集成指南</a> 。</p>\n","excerpt":"<p><img src=\"/img/iOSOTA.png\" alt=\"iOS-OTA\"></p>","more":"<ul>\n<li>1、控件到 <code>window</code> 的层级关系:   </li>\n<li>2、分析控件的详细路径:</li>\n<li>3、动态修改控件:      </li>\n<li>4、工具篇:</li>\n</ul>\n<h3 id=\"视图的层级关系\"><a href=\"#视图的层级关系\" class=\"headerlink\" title=\"视图的层级关系\"></a>视图的层级关系</h3><p>每个 <code>App</code> , 至少有一个根 <code>Window</code> , 通常情况下我们只用一个 。<code>window</code> 有一个 <code>rootViewController</code> , 这就是我们所谓的根视图 , 我们所有的控制器都是放在 <code>rootViewController</code> 里面的。</p>\n<p><img src=\"/img/bVqwV3\" alt=\"Dynamic-image1.jpeg\"></p>\n<p>这个是最简单的层级关系</p>\n<p>如果在项目里有了这么一个路径 , 我们可以做什么呢？   </p>\n<ul>\n<li>在当项目很复杂 , 可以其它地方可以直接修改这个控件的状态</li>\n<li>当某个控件命名存在却又没有显示出来 , 可以通过路径来辅助查找</li>\n<li>由服务器下发一些配置 , 使用 <code>Runtime</code> 去动态的修改已上线的项目</li>\n</ul>\n<p>下面将介绍如何使用代码来找出这些视图(控件)的路径</p>\n<h3 id=\"分析控件的详细路径\"><a href=\"#分析控件的详细路径\" class=\"headerlink\" title=\"分析控件的详细路径\"></a>分析控件的详细路径</h3><h4 id=\"1、找出根-Window\"><a href=\"#1、找出根-Window\" class=\"headerlink\" title=\"1、找出根 Window :\"></a>1、找出根 <code>Window</code> :</h4><p>每一个视图、控件 , 他们最终的根都是main函数返回的 <code>application</code> , 通过 <code>[UIApplication sharedApplication]</code> 可以得到 。 <code>application</code> 的 <code>windows</code> 属性是一个数组 , 这里面装的是这个应用的所有 <code>Window</code> , 我们通常用的是第一个也就是 <code>application.windows[0]</code>    </p>\n<h4 id=\"2、遍历视图\"><a href=\"#2、遍历视图\" class=\"headerlink\" title=\"2、遍历视图 :\"></a>2、遍历视图 :</h4><p>得到了 <code>window</code> 对象一切都好办了 。 然后拿到 <code>window</code> 的 <code>rootViewController</code> , 在获取 <code>rootViewController</code> 里面所有的 <code>childViewControllers</code> 和 <code>view</code> 里的 <code>subviews</code> , 一直递归下去就可以得到当前屏幕里所有视图对象了 , 同时可以通过 <code>runtime</code> 把它们的 <code>property</code>、<code>delegate</code> 都获取出来。  </p>\n<p>结合 <code>Reveal</code> 或者 <code>Xcode</code> 自带的 <code>Captuer View Hiearachy</code> , 我们可以推测一下这两个的的实现原理了 :  </p>\n<p>1、根据应用得到根视图<br>2、递归获取里面的所有控件<br>3、按照他们的层级关系一层一层的画出来</p>\n<h3 id=\"动态修改控件\"><a href=\"#动态修改控件\" class=\"headerlink\" title=\"动态修改控件\"></a>动态修改控件</h3><p>1、把上面获取到的所有控件的详细信息上传到服务器 。<br>2、根据业务需求由服务器给我们下发对应的配置列表，以 <code>button</code> 为例 : 配置列表里必须要有 :    </p>\n<blockquote>\n<p>1)、<code>button</code> 的全路径 : 如 <code>UIWindow</code> -&gt; <code>UIWindow</code> -&gt; <code>UIView</code> -&gt; <code>UIView</code> -&gt; <code>UILayoutContainerView</code> -&gt; <code>UITabBar</code> -&gt; <code>UIView</code> —&gt; <code>UIButton</code><br>2)、<code>button</code> 的唯一标识 : 如 <code>tag</code> 值或自己实现的一套算法生成的唯一标识 , 目的是防止与 <code>button</code> 同一层次的视图搞混 。<br>3)、 根据路径及唯一标识来匹配 <code>App</code> 里的控件 , 匹配和上面的查找原理是相通的。<br>4)、 匹配成功代表  <code>button</code> 确实存在 , 根据业务需求做后续操作 。<br>提示: 匹配策略尽可能的多 , 防止意外情况某一两个标识生成失败或者生成相同 。</p>\n</blockquote>\n<p>3、修改 <code>button</code> 的状态。</p>\n<blockquote>\n<p>1)、 如某个按钮点了会 <code>Crash</code> 或暂时不需要被点击 , 但是又要展示出来 , 可以直接修改 <code>button</code> 的 <code>enabled</code> 属性 。<br>2)、 如某业务暂时关闭 , 可以直接修改入口 <code>按钮</code> frame为0 , 前提是要自动布局已做好 。<br>3)、 如给购买 <code>按钮</code> 添加监听事件 <code>addTarget: action: forControlEvents:</code><br><code>target</code> 也可以通过上面 <code>遍历视图</code> 获取到 , <code>action</code> 可以由服务器下发 , 也可以一开始就写死 , 等有需求的时候直接传不同的参数就行了 。  </p>\n</blockquote>\n<p>4、 绑定查找控件时 , 这个界面必须要已经初始化完成了才行 , 假如界面还没生成肯定是查找不到这个控件的 。 这里给大家提供两种思路 : </p>\n<blockquote>\n<p>1、使用Runtime <code>Method Swizzing</code> ,  直接把修改控件的方法与 <code>didMoveToSuperview</code> 和 <code>didMoveToWindow</code> 动态绑定 , 等这个控件加载出来之后再去修改 , 查找路径正确的话肯定就能找到了 。<br>2、在具体的类里面 , 等控件的初始化方法调用完后 , 再去执行动态修改 , 如在<code>viewDidLoad</code> 里面初始化控件 , 在 <code>viewWillAppear:</code> 里面动态修改 。<br>建议使用第一种适用范围更强 。</p>\n</blockquote>\n<p>上架后的 <code>应用</code> 可能会遇到的一些突发状况 , 未测出的<code>Crash</code>、临时改点小需求 , 等等 , 我们总不能每次因为一点小改动就重新提交一次 <code>App Store</code> , 先不说 <code>App Store</code> 的审核时间 , 频繁的让用户去更新应用 , 用户也会烦的 。使用这篇文章所讲的来实现动态更新是再合适不过了 。   </p>\n<p>首先上面讲的 <code>动态更新</code> 是完全脱离出来的一个模块 , 跟业务逻辑没有任何关系 , 只需要部署一次就行了 , 等开发下一个项目也可以直接拿过去使用 。这里的动态更新适用于局部的视图、控件的修改 , 如果你有其它需求可以考虑 <a href=\"https://github.com/bang590/JSPatch\">JSPatch</a> , 下发脚本也是一个不错的选择 。</p>\n<h3 id=\"工具篇\"><a href=\"#工具篇\" class=\"headerlink\" title=\"工具篇\"></a>工具篇</h3><p>使用一些UI调试的辅助工具 , 使我们查看视图在项目中得层次结构更为方便 。<br>常用的UI调试的工具：</p>\n<ul>\n<li>Captuer View Hiearachy</li>\n<li>Reveal</li>\n</ul>\n<p>Xcode自带的 <code>Captuer View Hiearachy</code> 实现步骤:  </p>\n<ul>\n<li>1、打开Xcode , 运行项目 , 选择最顶部的 <code>Debug</code></li>\n<li>2、<code>Debug</code> -&gt; <code>View Debugging</code> -&gt; <code>Show View Frames</code></li>\n<li>3、<code>Debug</code> -&gt; <code>View Debugging</code> -&gt; <code>Captuer View Hiearachy</code></li>\n</ul>\n<p>Xcode里面就变成了三维的视图了 , Xcode左侧展示出来的是层级关系的树状图 。</p>\n<p>Reveal的功能相对来说更强大 , 适用于UI调试视图查找 。使用方法请看 <a href=\"http://support.revealapp.com/kb/getting-started/reveal\">Reveal集成指南</a> 。</p>"},{"layout":"post","title":"iOS 9 变化笔记","date":"2015-09-26T10:15:06.000Z","description":"iOS9 变化笔记, 以及工作中常遇到的问题","_content":"\n![iOS9](/img/iOS9.png)\n\n<!--more-->\n\n\n这里将介绍下我们日常开发一些从iOS8过度到iOS9给我们带来的一些变化，及解决方法。\n\n## App Transport Security\n\niOS9和OS X El Capitan的一个新特性，App Transport Security 的目地是提高Apple 操作系统的安全性以及在此操作系统上运行的任何应用的安全性。ATS是苹果针对与 NSURL这一层做的封装，iOS9后ATS默认是开启的，即网络传输需要使用HTTPS。如果想在iOS9后继续使用HTTP的话，有两条路可以走：\n\n1. 在Info.plist中添加 `NSAppTransportSecurity`类型Dictionary，在`NSAppTransportSecurity`下添加`NSAllowsArbitraryLoads`，Boolean 为 YES。\n2. 直接使用CFNetwork做网络请求，ASIHTTPRequest就是基于CFNetwotk做的封装，如果有需求的同学可以看看ASI里面的源码，如果某个时间段你又想要使用HTTPS的话，ASI对SSL/TSL的证书验证有点问题，证书验证还得自己封装一下才行。刚才我说道，ATS是苹果针对与NSURL这一层做的封装，所以我们使用CFNetwork或者更底层做网络请求的话是不受ATS限制的。\n\n\n###移除了discoveryd DNS解析服务\niPhone升级到iOS8后WiFi有时候会有问题，特别是Mac升级到OS X Yosemite后，时而电脑休眠唤醒唬就连不上WiFi，有时候还突然掉线，经常要手动去关闭WiFi在重新连接，这是因为苹果到了OS X Yosemite系统后，把之前的mDNSResponder换成了discoveryd DNS。iOS9和OS X Yosemite10.4后mDNSResponder又回来了。\n\nmDNSResponder： 苹果以前一直使用控制DNS和Bonjour服务的一种进程。\ndiscoveryd：OS X Yosemite后苹果新出的一种进程。\n\n## **App Thinning**\nApp Thinning是一个关于节省iOS设备存储空间的功能，它可以让iOS设备在安装、更新及运行App等场景中仅下载所需的资源，减少App的占用空间，从而节省设备的存储空间。\n\n### App Thinning主要有三个机制：\n\n1. Slicing： 开发者把App安装包上传到AppStore后，Apple服务会自动对安装包切割为不同的应用变体(App variant)， 当用户下载安装包时，系统会根据设备型号下载安装对应的单个应用变体。\n2. On-Demand Resources： ORD(随需资源)是指开发者对资源添加标签上传后，系统会根据App运行的情况，动态下载并加载所需资源，而在存储空间不足时，自动删除这类资源。\n3. Bitcode：开启Bitcode编译后，可以使得开发者上传App时只需上传Intermediate Representation(中间件)，而非最终的可执行二进制文件。 在用户下载App之前，AppStore会自动编译中间件，产生设备所需的执行文件供用户下载安装。\n\n其中，Bitcode的机制可以支持动态的进行App Slicing，而对于Apple未来进行硬件升级的措施，此机制可以保证在开发者不重新发布版本的情况下而兼容新的设备。Xcode7默认是开始了Bitcode，如果不想使用可以手动关闭Bitcode：\n\n\n\n* 选择项目——>点击Target——>点击Build Setttings——>搜索栏里搜bitcode——>把Enable Bitcode对应的Yes改成No。\n\n\n启用Bitcode编译机制，需要注意以下几点：\n\n1. 如果应用开启Bitcode，那么其集成的其他第三方库也需要是Bitcode编译的包才能真正进行Bitcode编译\n2. 开启Bitcode编译后，编译产生的.app体积会变大(中间代码，不是用户下载的包)，且.dSYM文件不能用来崩溃日志的符号化（用户下载的包是Apple服务重新编译产生的，有产生新的符号文件），使用dSYM来收集Crash日志的同学得注意了。\n3. 通过Archive方式上传AppStore的包，可以在Xcode的Organizer工具中下载对应安装包的新的符号文件\n \n\n## **后台定位**\niOS9后苹果为了对保障用户的地理位置的隐私对App请求后台定位有了权限设置，则需要多加一些代码。如果不适配iOS9，就不能偷偷在后台定位，如果没有后台定位的权限也是可以在后台定位的，只是会出现蓝条。\n\n开启后台定位功能：`locationManager.allowsBackgroundLocationUpdates = YES;`\nlocationManager是CLLocationManager的对象，用来管理整个定位的。\n\n**重点：**\n\n> 配置info.plist，添加一个Required background modes，Array类型的，然后在Required background modes里面Item 0对应的Value设置为App registers for location updates，这样就解决了iOS9后台定位出现蓝条的问题了。\n\n\n## **UI Testing**\nXcode7中苹果引入了一种新的方式在应用中进行测试——UI Testting，UI Testting允许我们找到UI元素与之交互，还能检查属性和状态。UI Testting已经完全集成进了Xcode7的测试报告，可以和单元测试一起执行。使用起来跟之前Xcode5出来的XCTest差不多，Xcode bots提供对此的支持，而且command line支持当UI测试失败时会立即发出通知。\n\n可以参考Github上的Demo，步骤：\n\n1. 在DemoTests.m里创建一个test开头的方法\n2. 在setUp()里启动应用 `XCUIApplication().launch()`\n3. 新建一个方法test开头的，在里面获取应用`let app = XCUIApplication()`\n4. 的到`let app = XCUIApplication()`，a`pp.buttons[“View Detail”].tap()?`。buttons是当前这个界面的所有按钮的集合，[]里面写按钮的名字，tap()就是执行这个按钮所对应的方法，可以是网络请求、界面跳转等等。\n\n\n## URL scheme\n\n在iOS9中，如果使用URL scheme必须在\"Info.plist\"中将你要在外部调用的URL scheme列为白名单，否则不能使用。\n\n配置info.plist，添加一个`LSApplicationQueriesSchemes`，Array类型的，然后在`LSApplicationQueriesSchemes`的Item里面添加urlscheme就行了，urlscheme是任意一个字符串，就是你自己需要使用的urlscheme，iOS9 URL scheme白名单适配就完成了。\n\n## 出现大量的警告\n\nXcode7后运行以前的项目后出现大量的警告如：\n\n```bash\n(null): warning: /var/folders/p4/z7zy68r92hd3p5ry5g2v3k_8rlwzzr/C/org.llvm.clang.dalmo/ModuleCache/1TXZDLI9N2EMV/Foundation-3DFYNEBRQSXST.pcm: No such file or directory。\n```\n\n作为一个有洁癖的我反正是不能忍，出现警告的大致原因跟我上面提到的开启Bitcode，.dSYM文件不能用来符号化有关，Xcode试图去创建dSYM文件，但是你又不需要。\n\n### 解决方法\n\n1. Build Settings ——>Build Options——>Debug Information Format\n2. Debug下的DWARF with dsYM File改成DWARF\n3. Release下的还是之前默认的DWARF with dsYM File不变\n \n\n参考资料：\n\n- [iOS9AdaptationTips](https://github.com/ChenYilong/iOS9AdaptationTips) \n- [iOS9学习系列](http://www.cocoachina.com/ios/20150821/13140.html) \n- [iOS9-day-by-day](https://github.com/shinobicontrols/iOS9-day-by-day)","source":"_posts/iOS9 变化笔记.md","raw":"---\nlayout: post\ntitle: \"iOS 9 变化笔记\"\ndate: 2015-09-26 18:15:06 \ndescription: \"iOS9 变化笔记, 以及工作中常遇到的问题\"\ncategory: iOS\n---\n\n![iOS9](/img/iOS9.png)\n\n<!--more-->\n\n\n这里将介绍下我们日常开发一些从iOS8过度到iOS9给我们带来的一些变化，及解决方法。\n\n## App Transport Security\n\niOS9和OS X El Capitan的一个新特性，App Transport Security 的目地是提高Apple 操作系统的安全性以及在此操作系统上运行的任何应用的安全性。ATS是苹果针对与 NSURL这一层做的封装，iOS9后ATS默认是开启的，即网络传输需要使用HTTPS。如果想在iOS9后继续使用HTTP的话，有两条路可以走：\n\n1. 在Info.plist中添加 `NSAppTransportSecurity`类型Dictionary，在`NSAppTransportSecurity`下添加`NSAllowsArbitraryLoads`，Boolean 为 YES。\n2. 直接使用CFNetwork做网络请求，ASIHTTPRequest就是基于CFNetwotk做的封装，如果有需求的同学可以看看ASI里面的源码，如果某个时间段你又想要使用HTTPS的话，ASI对SSL/TSL的证书验证有点问题，证书验证还得自己封装一下才行。刚才我说道，ATS是苹果针对与NSURL这一层做的封装，所以我们使用CFNetwork或者更底层做网络请求的话是不受ATS限制的。\n\n\n###移除了discoveryd DNS解析服务\niPhone升级到iOS8后WiFi有时候会有问题，特别是Mac升级到OS X Yosemite后，时而电脑休眠唤醒唬就连不上WiFi，有时候还突然掉线，经常要手动去关闭WiFi在重新连接，这是因为苹果到了OS X Yosemite系统后，把之前的mDNSResponder换成了discoveryd DNS。iOS9和OS X Yosemite10.4后mDNSResponder又回来了。\n\nmDNSResponder： 苹果以前一直使用控制DNS和Bonjour服务的一种进程。\ndiscoveryd：OS X Yosemite后苹果新出的一种进程。\n\n## **App Thinning**\nApp Thinning是一个关于节省iOS设备存储空间的功能，它可以让iOS设备在安装、更新及运行App等场景中仅下载所需的资源，减少App的占用空间，从而节省设备的存储空间。\n\n### App Thinning主要有三个机制：\n\n1. Slicing： 开发者把App安装包上传到AppStore后，Apple服务会自动对安装包切割为不同的应用变体(App variant)， 当用户下载安装包时，系统会根据设备型号下载安装对应的单个应用变体。\n2. On-Demand Resources： ORD(随需资源)是指开发者对资源添加标签上传后，系统会根据App运行的情况，动态下载并加载所需资源，而在存储空间不足时，自动删除这类资源。\n3. Bitcode：开启Bitcode编译后，可以使得开发者上传App时只需上传Intermediate Representation(中间件)，而非最终的可执行二进制文件。 在用户下载App之前，AppStore会自动编译中间件，产生设备所需的执行文件供用户下载安装。\n\n其中，Bitcode的机制可以支持动态的进行App Slicing，而对于Apple未来进行硬件升级的措施，此机制可以保证在开发者不重新发布版本的情况下而兼容新的设备。Xcode7默认是开始了Bitcode，如果不想使用可以手动关闭Bitcode：\n\n\n\n* 选择项目——>点击Target——>点击Build Setttings——>搜索栏里搜bitcode——>把Enable Bitcode对应的Yes改成No。\n\n\n启用Bitcode编译机制，需要注意以下几点：\n\n1. 如果应用开启Bitcode，那么其集成的其他第三方库也需要是Bitcode编译的包才能真正进行Bitcode编译\n2. 开启Bitcode编译后，编译产生的.app体积会变大(中间代码，不是用户下载的包)，且.dSYM文件不能用来崩溃日志的符号化（用户下载的包是Apple服务重新编译产生的，有产生新的符号文件），使用dSYM来收集Crash日志的同学得注意了。\n3. 通过Archive方式上传AppStore的包，可以在Xcode的Organizer工具中下载对应安装包的新的符号文件\n \n\n## **后台定位**\niOS9后苹果为了对保障用户的地理位置的隐私对App请求后台定位有了权限设置，则需要多加一些代码。如果不适配iOS9，就不能偷偷在后台定位，如果没有后台定位的权限也是可以在后台定位的，只是会出现蓝条。\n\n开启后台定位功能：`locationManager.allowsBackgroundLocationUpdates = YES;`\nlocationManager是CLLocationManager的对象，用来管理整个定位的。\n\n**重点：**\n\n> 配置info.plist，添加一个Required background modes，Array类型的，然后在Required background modes里面Item 0对应的Value设置为App registers for location updates，这样就解决了iOS9后台定位出现蓝条的问题了。\n\n\n## **UI Testing**\nXcode7中苹果引入了一种新的方式在应用中进行测试——UI Testting，UI Testting允许我们找到UI元素与之交互，还能检查属性和状态。UI Testting已经完全集成进了Xcode7的测试报告，可以和单元测试一起执行。使用起来跟之前Xcode5出来的XCTest差不多，Xcode bots提供对此的支持，而且command line支持当UI测试失败时会立即发出通知。\n\n可以参考Github上的Demo，步骤：\n\n1. 在DemoTests.m里创建一个test开头的方法\n2. 在setUp()里启动应用 `XCUIApplication().launch()`\n3. 新建一个方法test开头的，在里面获取应用`let app = XCUIApplication()`\n4. 的到`let app = XCUIApplication()`，a`pp.buttons[“View Detail”].tap()?`。buttons是当前这个界面的所有按钮的集合，[]里面写按钮的名字，tap()就是执行这个按钮所对应的方法，可以是网络请求、界面跳转等等。\n\n\n## URL scheme\n\n在iOS9中，如果使用URL scheme必须在\"Info.plist\"中将你要在外部调用的URL scheme列为白名单，否则不能使用。\n\n配置info.plist，添加一个`LSApplicationQueriesSchemes`，Array类型的，然后在`LSApplicationQueriesSchemes`的Item里面添加urlscheme就行了，urlscheme是任意一个字符串，就是你自己需要使用的urlscheme，iOS9 URL scheme白名单适配就完成了。\n\n## 出现大量的警告\n\nXcode7后运行以前的项目后出现大量的警告如：\n\n```bash\n(null): warning: /var/folders/p4/z7zy68r92hd3p5ry5g2v3k_8rlwzzr/C/org.llvm.clang.dalmo/ModuleCache/1TXZDLI9N2EMV/Foundation-3DFYNEBRQSXST.pcm: No such file or directory。\n```\n\n作为一个有洁癖的我反正是不能忍，出现警告的大致原因跟我上面提到的开启Bitcode，.dSYM文件不能用来符号化有关，Xcode试图去创建dSYM文件，但是你又不需要。\n\n### 解决方法\n\n1. Build Settings ——>Build Options——>Debug Information Format\n2. Debug下的DWARF with dsYM File改成DWARF\n3. Release下的还是之前默认的DWARF with dsYM File不变\n \n\n参考资料：\n\n- [iOS9AdaptationTips](https://github.com/ChenYilong/iOS9AdaptationTips) \n- [iOS9学习系列](http://www.cocoachina.com/ios/20150821/13140.html) \n- [iOS9-day-by-day](https://github.com/shinobicontrols/iOS9-day-by-day)","slug":"iOS9 变化笔记","published":1,"updated":"2016-04-26T01:52:56.000Z","comments":1,"photos":[],"link":"","_id":"cini7ici60007kofy0nt1o9z4","content":"<p><img src=\"/img/iOS9.png\" alt=\"iOS9\"></p>\n<a id=\"more\"></a>\n<p>这里将介绍下我们日常开发一些从iOS8过度到iOS9给我们带来的一些变化，及解决方法。</p>\n<h2 id=\"App-Transport-Security\"><a href=\"#App-Transport-Security\" class=\"headerlink\" title=\"App Transport Security\"></a>App Transport Security</h2><p>iOS9和OS X El Capitan的一个新特性，App Transport Security 的目地是提高Apple 操作系统的安全性以及在此操作系统上运行的任何应用的安全性。ATS是苹果针对与 NSURL这一层做的封装，iOS9后ATS默认是开启的，即网络传输需要使用HTTPS。如果想在iOS9后继续使用HTTP的话，有两条路可以走：</p>\n<ol>\n<li>在Info.plist中添加 <code>NSAppTransportSecurity</code>类型Dictionary，在<code>NSAppTransportSecurity</code>下添加<code>NSAllowsArbitraryLoads</code>，Boolean 为 YES。</li>\n<li>直接使用CFNetwork做网络请求，ASIHTTPRequest就是基于CFNetwotk做的封装，如果有需求的同学可以看看ASI里面的源码，如果某个时间段你又想要使用HTTPS的话，ASI对SSL/TSL的证书验证有点问题，证书验证还得自己封装一下才行。刚才我说道，ATS是苹果针对与NSURL这一层做的封装，所以我们使用CFNetwork或者更底层做网络请求的话是不受ATS限制的。</li>\n</ol>\n<p>###移除了discoveryd DNS解析服务<br>iPhone升级到iOS8后WiFi有时候会有问题，特别是Mac升级到OS X Yosemite后，时而电脑休眠唤醒唬就连不上WiFi，有时候还突然掉线，经常要手动去关闭WiFi在重新连接，这是因为苹果到了OS X Yosemite系统后，把之前的mDNSResponder换成了discoveryd DNS。iOS9和OS X Yosemite10.4后mDNSResponder又回来了。</p>\n<p>mDNSResponder： 苹果以前一直使用控制DNS和Bonjour服务的一种进程。<br>discoveryd：OS X Yosemite后苹果新出的一种进程。</p>\n<h2 id=\"App-Thinning\"><a href=\"#App-Thinning\" class=\"headerlink\" title=\"App Thinning\"></a><strong>App Thinning</strong></h2><p>App Thinning是一个关于节省iOS设备存储空间的功能，它可以让iOS设备在安装、更新及运行App等场景中仅下载所需的资源，减少App的占用空间，从而节省设备的存储空间。</p>\n<h3 id=\"App-Thinning主要有三个机制：\"><a href=\"#App-Thinning主要有三个机制：\" class=\"headerlink\" title=\"App Thinning主要有三个机制：\"></a>App Thinning主要有三个机制：</h3><ol>\n<li>Slicing： 开发者把App安装包上传到AppStore后，Apple服务会自动对安装包切割为不同的应用变体(App variant)， 当用户下载安装包时，系统会根据设备型号下载安装对应的单个应用变体。</li>\n<li>On-Demand Resources： ORD(随需资源)是指开发者对资源添加标签上传后，系统会根据App运行的情况，动态下载并加载所需资源，而在存储空间不足时，自动删除这类资源。</li>\n<li>Bitcode：开启Bitcode编译后，可以使得开发者上传App时只需上传Intermediate Representation(中间件)，而非最终的可执行二进制文件。 在用户下载App之前，AppStore会自动编译中间件，产生设备所需的执行文件供用户下载安装。</li>\n</ol>\n<p>其中，Bitcode的机制可以支持动态的进行App Slicing，而对于Apple未来进行硬件升级的措施，此机制可以保证在开发者不重新发布版本的情况下而兼容新的设备。Xcode7默认是开始了Bitcode，如果不想使用可以手动关闭Bitcode：</p>\n<ul>\n<li>选择项目——&gt;点击Target——&gt;点击Build Setttings——&gt;搜索栏里搜bitcode——&gt;把Enable Bitcode对应的Yes改成No。</li>\n</ul>\n<p>启用Bitcode编译机制，需要注意以下几点：</p>\n<ol>\n<li>如果应用开启Bitcode，那么其集成的其他第三方库也需要是Bitcode编译的包才能真正进行Bitcode编译</li>\n<li>开启Bitcode编译后，编译产生的.app体积会变大(中间代码，不是用户下载的包)，且.dSYM文件不能用来崩溃日志的符号化（用户下载的包是Apple服务重新编译产生的，有产生新的符号文件），使用dSYM来收集Crash日志的同学得注意了。</li>\n<li>通过Archive方式上传AppStore的包，可以在Xcode的Organizer工具中下载对应安装包的新的符号文件</li>\n</ol>\n<h2 id=\"后台定位\"><a href=\"#后台定位\" class=\"headerlink\" title=\"后台定位\"></a><strong>后台定位</strong></h2><p>iOS9后苹果为了对保障用户的地理位置的隐私对App请求后台定位有了权限设置，则需要多加一些代码。如果不适配iOS9，就不能偷偷在后台定位，如果没有后台定位的权限也是可以在后台定位的，只是会出现蓝条。</p>\n<p>开启后台定位功能：<code>locationManager.allowsBackgroundLocationUpdates = YES;</code><br>locationManager是CLLocationManager的对象，用来管理整个定位的。</p>\n<p><strong>重点：</strong></p>\n<blockquote>\n<p>配置info.plist，添加一个Required background modes，Array类型的，然后在Required background modes里面Item 0对应的Value设置为App registers for location updates，这样就解决了iOS9后台定位出现蓝条的问题了。</p>\n</blockquote>\n<h2 id=\"UI-Testing\"><a href=\"#UI-Testing\" class=\"headerlink\" title=\"UI Testing\"></a><strong>UI Testing</strong></h2><p>Xcode7中苹果引入了一种新的方式在应用中进行测试——UI Testting，UI Testting允许我们找到UI元素与之交互，还能检查属性和状态。UI Testting已经完全集成进了Xcode7的测试报告，可以和单元测试一起执行。使用起来跟之前Xcode5出来的XCTest差不多，Xcode bots提供对此的支持，而且command line支持当UI测试失败时会立即发出通知。</p>\n<p>可以参考Github上的Demo，步骤：</p>\n<ol>\n<li>在DemoTests.m里创建一个test开头的方法</li>\n<li>在setUp()里启动应用 <code>XCUIApplication().launch()</code></li>\n<li>新建一个方法test开头的，在里面获取应用<code>let app = XCUIApplication()</code></li>\n<li>的到<code>let app = XCUIApplication()</code>，a<code>pp.buttons[“View Detail”].tap()?</code>。buttons是当前这个界面的所有按钮的集合，[]里面写按钮的名字，tap()就是执行这个按钮所对应的方法，可以是网络请求、界面跳转等等。</li>\n</ol>\n<h2 id=\"URL-scheme\"><a href=\"#URL-scheme\" class=\"headerlink\" title=\"URL scheme\"></a>URL scheme</h2><p>在iOS9中，如果使用URL scheme必须在”Info.plist”中将你要在外部调用的URL scheme列为白名单，否则不能使用。</p>\n<p>配置info.plist，添加一个<code>LSApplicationQueriesSchemes</code>，Array类型的，然后在<code>LSApplicationQueriesSchemes</code>的Item里面添加urlscheme就行了，urlscheme是任意一个字符串，就是你自己需要使用的urlscheme，iOS9 URL scheme白名单适配就完成了。</p>\n<h2 id=\"出现大量的警告\"><a href=\"#出现大量的警告\" class=\"headerlink\" title=\"出现大量的警告\"></a>出现大量的警告</h2><p>Xcode7后运行以前的项目后出现大量的警告如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(null): warning: /var/folders/p4/z7zy68r92hd3p5ry5g2v3k_8rlwzzr/C/org.llvm.clang.dalmo/ModuleCache/1TXZDLI9N2EMV/Foundation-3DFYNEBRQSXST.pcm: No such file or directory。</span><br></pre></td></tr></table></figure>\n<p>作为一个有洁癖的我反正是不能忍，出现警告的大致原因跟我上面提到的开启Bitcode，.dSYM文件不能用来符号化有关，Xcode试图去创建dSYM文件，但是你又不需要。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ol>\n<li>Build Settings ——&gt;Build Options——&gt;Debug Information Format</li>\n<li>Debug下的DWARF with dsYM File改成DWARF</li>\n<li>Release下的还是之前默认的DWARF with dsYM File不变</li>\n</ol>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://github.com/ChenYilong/iOS9AdaptationTips\" target=\"_blank\" rel=\"external\">iOS9AdaptationTips</a> </li>\n<li><a href=\"http://www.cocoachina.com/ios/20150821/13140.html\" target=\"_blank\" rel=\"external\">iOS9学习系列</a> </li>\n<li><a href=\"https://github.com/shinobicontrols/iOS9-day-by-day\" target=\"_blank\" rel=\"external\">iOS9-day-by-day</a></li>\n</ul>\n","excerpt":"<p><img src=\"/img/iOS9.png\" alt=\"iOS9\"></p>","more":"<p>这里将介绍下我们日常开发一些从iOS8过度到iOS9给我们带来的一些变化，及解决方法。</p>\n<h2 id=\"App-Transport-Security\"><a href=\"#App-Transport-Security\" class=\"headerlink\" title=\"App Transport Security\"></a>App Transport Security</h2><p>iOS9和OS X El Capitan的一个新特性，App Transport Security 的目地是提高Apple 操作系统的安全性以及在此操作系统上运行的任何应用的安全性。ATS是苹果针对与 NSURL这一层做的封装，iOS9后ATS默认是开启的，即网络传输需要使用HTTPS。如果想在iOS9后继续使用HTTP的话，有两条路可以走：</p>\n<ol>\n<li>在Info.plist中添加 <code>NSAppTransportSecurity</code>类型Dictionary，在<code>NSAppTransportSecurity</code>下添加<code>NSAllowsArbitraryLoads</code>，Boolean 为 YES。</li>\n<li>直接使用CFNetwork做网络请求，ASIHTTPRequest就是基于CFNetwotk做的封装，如果有需求的同学可以看看ASI里面的源码，如果某个时间段你又想要使用HTTPS的话，ASI对SSL/TSL的证书验证有点问题，证书验证还得自己封装一下才行。刚才我说道，ATS是苹果针对与NSURL这一层做的封装，所以我们使用CFNetwork或者更底层做网络请求的话是不受ATS限制的。</li>\n</ol>\n<p>###移除了discoveryd DNS解析服务<br>iPhone升级到iOS8后WiFi有时候会有问题，特别是Mac升级到OS X Yosemite后，时而电脑休眠唤醒唬就连不上WiFi，有时候还突然掉线，经常要手动去关闭WiFi在重新连接，这是因为苹果到了OS X Yosemite系统后，把之前的mDNSResponder换成了discoveryd DNS。iOS9和OS X Yosemite10.4后mDNSResponder又回来了。</p>\n<p>mDNSResponder： 苹果以前一直使用控制DNS和Bonjour服务的一种进程。<br>discoveryd：OS X Yosemite后苹果新出的一种进程。</p>\n<h2 id=\"App-Thinning\"><a href=\"#App-Thinning\" class=\"headerlink\" title=\"App Thinning\"></a><strong>App Thinning</strong></h2><p>App Thinning是一个关于节省iOS设备存储空间的功能，它可以让iOS设备在安装、更新及运行App等场景中仅下载所需的资源，减少App的占用空间，从而节省设备的存储空间。</p>\n<h3 id=\"App-Thinning主要有三个机制：\"><a href=\"#App-Thinning主要有三个机制：\" class=\"headerlink\" title=\"App Thinning主要有三个机制：\"></a>App Thinning主要有三个机制：</h3><ol>\n<li>Slicing： 开发者把App安装包上传到AppStore后，Apple服务会自动对安装包切割为不同的应用变体(App variant)， 当用户下载安装包时，系统会根据设备型号下载安装对应的单个应用变体。</li>\n<li>On-Demand Resources： ORD(随需资源)是指开发者对资源添加标签上传后，系统会根据App运行的情况，动态下载并加载所需资源，而在存储空间不足时，自动删除这类资源。</li>\n<li>Bitcode：开启Bitcode编译后，可以使得开发者上传App时只需上传Intermediate Representation(中间件)，而非最终的可执行二进制文件。 在用户下载App之前，AppStore会自动编译中间件，产生设备所需的执行文件供用户下载安装。</li>\n</ol>\n<p>其中，Bitcode的机制可以支持动态的进行App Slicing，而对于Apple未来进行硬件升级的措施，此机制可以保证在开发者不重新发布版本的情况下而兼容新的设备。Xcode7默认是开始了Bitcode，如果不想使用可以手动关闭Bitcode：</p>\n<ul>\n<li>选择项目——&gt;点击Target——&gt;点击Build Setttings——&gt;搜索栏里搜bitcode——&gt;把Enable Bitcode对应的Yes改成No。</li>\n</ul>\n<p>启用Bitcode编译机制，需要注意以下几点：</p>\n<ol>\n<li>如果应用开启Bitcode，那么其集成的其他第三方库也需要是Bitcode编译的包才能真正进行Bitcode编译</li>\n<li>开启Bitcode编译后，编译产生的.app体积会变大(中间代码，不是用户下载的包)，且.dSYM文件不能用来崩溃日志的符号化（用户下载的包是Apple服务重新编译产生的，有产生新的符号文件），使用dSYM来收集Crash日志的同学得注意了。</li>\n<li>通过Archive方式上传AppStore的包，可以在Xcode的Organizer工具中下载对应安装包的新的符号文件</li>\n</ol>\n<h2 id=\"后台定位\"><a href=\"#后台定位\" class=\"headerlink\" title=\"后台定位\"></a><strong>后台定位</strong></h2><p>iOS9后苹果为了对保障用户的地理位置的隐私对App请求后台定位有了权限设置，则需要多加一些代码。如果不适配iOS9，就不能偷偷在后台定位，如果没有后台定位的权限也是可以在后台定位的，只是会出现蓝条。</p>\n<p>开启后台定位功能：<code>locationManager.allowsBackgroundLocationUpdates = YES;</code><br>locationManager是CLLocationManager的对象，用来管理整个定位的。</p>\n<p><strong>重点：</strong></p>\n<blockquote>\n<p>配置info.plist，添加一个Required background modes，Array类型的，然后在Required background modes里面Item 0对应的Value设置为App registers for location updates，这样就解决了iOS9后台定位出现蓝条的问题了。</p>\n</blockquote>\n<h2 id=\"UI-Testing\"><a href=\"#UI-Testing\" class=\"headerlink\" title=\"UI Testing\"></a><strong>UI Testing</strong></h2><p>Xcode7中苹果引入了一种新的方式在应用中进行测试——UI Testting，UI Testting允许我们找到UI元素与之交互，还能检查属性和状态。UI Testting已经完全集成进了Xcode7的测试报告，可以和单元测试一起执行。使用起来跟之前Xcode5出来的XCTest差不多，Xcode bots提供对此的支持，而且command line支持当UI测试失败时会立即发出通知。</p>\n<p>可以参考Github上的Demo，步骤：</p>\n<ol>\n<li>在DemoTests.m里创建一个test开头的方法</li>\n<li>在setUp()里启动应用 <code>XCUIApplication().launch()</code></li>\n<li>新建一个方法test开头的，在里面获取应用<code>let app = XCUIApplication()</code></li>\n<li>的到<code>let app = XCUIApplication()</code>，a<code>pp.buttons[“View Detail”].tap()?</code>。buttons是当前这个界面的所有按钮的集合，[]里面写按钮的名字，tap()就是执行这个按钮所对应的方法，可以是网络请求、界面跳转等等。</li>\n</ol>\n<h2 id=\"URL-scheme\"><a href=\"#URL-scheme\" class=\"headerlink\" title=\"URL scheme\"></a>URL scheme</h2><p>在iOS9中，如果使用URL scheme必须在”Info.plist”中将你要在外部调用的URL scheme列为白名单，否则不能使用。</p>\n<p>配置info.plist，添加一个<code>LSApplicationQueriesSchemes</code>，Array类型的，然后在<code>LSApplicationQueriesSchemes</code>的Item里面添加urlscheme就行了，urlscheme是任意一个字符串，就是你自己需要使用的urlscheme，iOS9 URL scheme白名单适配就完成了。</p>\n<h2 id=\"出现大量的警告\"><a href=\"#出现大量的警告\" class=\"headerlink\" title=\"出现大量的警告\"></a>出现大量的警告</h2><p>Xcode7后运行以前的项目后出现大量的警告如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(null): warning: /var/folders/p4/z7zy68r92hd3p5ry5g2v3k_8rlwzzr/C/org.llvm.clang.dalmo/ModuleCache/1TXZDLI9N2EMV/Foundation-3DFYNEBRQSXST.pcm: No such file or directory。</span><br></pre></td></tr></table></figure>\n<p>作为一个有洁癖的我反正是不能忍，出现警告的大致原因跟我上面提到的开启Bitcode，.dSYM文件不能用来符号化有关，Xcode试图去创建dSYM文件，但是你又不需要。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ol>\n<li>Build Settings ——&gt;Build Options——&gt;Debug Information Format</li>\n<li>Debug下的DWARF with dsYM File改成DWARF</li>\n<li>Release下的还是之前默认的DWARF with dsYM File不变</li>\n</ol>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://github.com/ChenYilong/iOS9AdaptationTips\">iOS9AdaptationTips</a> </li>\n<li><a href=\"http://www.cocoachina.com/ios/20150821/13140.html\">iOS9学习系列</a> </li>\n<li><a href=\"https://github.com/shinobicontrols/iOS9-day-by-day\">iOS9-day-by-day</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cini7ichr0000kofymja1iwi6","category_id":"cini7ichy0002kofy33ht8k1w","_id":"cini7ici70008kofymid3ty35"},{"post_id":"cini7ichv0001kofys5mmtji2","category_id":"cini7ici50006kofy0znvw6mk","_id":"cini7ici9000akofygxo54zou"},{"post_id":"cini7ici10003kofy9h1hdt5s","category_id":"cini7ici50006kofy0znvw6mk","_id":"cini7icib000ckofy6r7e5wpr"},{"post_id":"cini7ici20004kofypdpqvtyv","category_id":"cini7icia000bkofyiw04obmv","_id":"cini7icic000ekofy8jya0cb6"},{"post_id":"cini7ici30005kofyrcyvmjib","category_id":"cini7icib000dkofy2xuyl8gf","_id":"cini7icig000gkofyvpln2p4l"},{"post_id":"cini7ici60007kofy0nt1o9z4","category_id":"cini7icib000dkofy2xuyl8gf","_id":"cini7icig000hkofyjs7ov12w"}],"PostTag":[],"Tag":[]}}